
@inject ILocalStorage LocalStorage
@inject AuthService authService

@if (authService.CurrentRoleName == null || authService.CurrentRoleName == "")
{

}
else
{

    <div class="top-row ps-3 navbar navbar-dark">
        <div class="container-fluid">
            <a class="navbar-brand">Project Management Hub</a>
            <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
                <span class="navbar-toggler-icon"></span>
            </button>
        </div>
    </div>

    <div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
        <nav class="flex-column">
            @if (authService.CurrentRoleName == null || authService.CurrentRoleName == "")
            {
                @*<div class="nav-item px-3">
        <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
        <span class="oi oi-person" aria-hidden="true"></span> Log In
        </NavLink>
        </div>*@
            }
            else if (authService.CurrentRoleName == "administrator")
            {
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="projects" Match="NavLinkMatch.All">
                        <span class="oi oi-list-rich" aria-hidden="true"></span> Projects
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="tasks">
                        <span class="oi oi-check" aria-hidden="true"></span> Tasks
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="users">
                        <span class="oi oi-people" aria-hidden="true"></span> Users
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="profile">
                        <span class="oi oi-person" aria-hidden="true"></span> Profile
                    </NavLink>
                </div>
            }
            else if (authService.CurrentRoleName == "projectmanager")
            {
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="projects" Match="NavLinkMatch.All">
                        <span class="oi oi-list-rich" aria-hidden="true"></span> Projects
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="tasks">
                        <span class="oi oi-check" aria-hidden="true"></span> Tasks
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="profile">
                        <span class="oi oi-person" aria-hidden="true"></span> Profile
                    </NavLink>
                </div>
            }
            else if (authService.CurrentRoleName == "developer")
            {
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="tasks" Match="NavLinkMatch.All">
                        <span class="oi oi-list-rich" aria-hidden="true"></span> Tasks
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="profile">
                        <span class="oi oi-person" aria-hidden="true"></span> Profile
                    </NavLink>
                </div>
            }
            else
            {

            }


        </nav>
    </div>
}


@code {
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    //[Parameter] public string? role { get; set; } = null;

    //[Parameter] public EventCallback<string> RoleChanged { get; set; }

    //private Task OnRoleChanged(ChangeEventArgs e)
    //{
    //    role = e.Value.ToString();
    //    return RoleChanged.InvokeAsync(role);
    //}

    protected override async Task OnInitializedAsync()
    {
        // if the OnChange event is raised, refresh this view
        authService.OnChange += () => StateHasChanged();

        await base.OnInitializedAsync();
    }
}
