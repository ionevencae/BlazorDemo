@page "/tasks"
@page "/tasks/{projcode}"

@inject ILocalStorage LocalStorage
@inject AuthService authService
@inject IUserService UserService
@inject IProjectService ProjectService
@inject IProjectTaskService ProjectTaskService
@inject IRoleService RoleService
@inject NavigationManager NavigationManager
@inject IPaginationService PaginationService


@if(projcode == null)
{
    <table class="table" style="width: 90%">
        <thead>
            <tr>
                @if (authService.CurrentRoleName == "administrator" || authService.CurrentRoleName == "projectmanager" || 
                authService.CurrentRoleName == "developer")
                {
                    <th style="width: 8%"><h2>Tasks</h2></th>
                    @if (authService.CurrentRoleName == "administrator" || authService.CurrentRoleName == "projectmanager")
                    {
                        <th>
                            <h3>
                                <button class="btn btn-success" @onclick="(() => createTask())">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus" viewBox="0 0 16 16">
                                        <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
                                    </svg>
                                Create a new Task
                                    
                                
                                </button>
                                
                            </h3>
                        </th>
                    }
                }
                @if (authService.CurrentRoleName == "projectmanager")
                {
                    <th style="width: 8%">

                    </th>
                    <th style="width:22%">
                        <h2>Show tasks from: </h2>

                    </th>
                    <th>
                        <div style="padding-bottom: 7px" class="btn-group btn-group-toggle" data-toggle="buttons">
                            <label class="btn btn-secondary active">
                                <input type="radio" name="options" id="option1" autocomplete="off" checked @onclick="(() => ManagedByMe())"> Projects I manage
                            </label>
                            <label class="btn btn-secondary">
                                <input type="radio" name="options" id="option2" autocomplete="off" @onclick="(() => OtherProjects())"> Other Projects
                            </label>
                        </div>
                    </th>
                }
                
                
                
            </tr>
        </thead>
    </table>


    @if (authService.CurrentRoleName == "administrator" || authService.CurrentRoleName == "projectmanager" ||
               authService.CurrentRoleName == "developer")
    {
        @if (CheckNumOfTasks(projectTaskList))
        {

            <nav aria-label="Page navigation example" style="width: 90%">
                <ul class="pagination justify-content-center">
                    @if (pagenum <= 1)
                    {
                        <li class="page-item disabled">
                            <button disabled @onclick="(() => PrevPage())" class="page-link" aria-label="Previous">
                                <span aria-hidden="true">&laquo;</span>
                                <span class="sr-only">Previous</span>
                            </button>
                        </li>
                    }
                    else
                    {
                        <li class="page-item ">
                            <button @onclick="(() => PrevPage())" class="page-link" aria-label="Previous">
                                <span aria-hidden="true">&laquo;</span>
                                <span class="sr-only">Previous</span>
                            </button>
                        </li>
                    }
                    <li class="page-item"><a class="page-link">@pagenum / @MaxPages()</a></li>

                    @if (pagenum >= MaxPages())
                    {
                        <li class="page-item disabled">
                            <button disabled @onclick="(() => NextPage())" class="page-link" aria-label="Next">
                                <span class="sr-only">Next</span>
                                <span aria-hidden="true">&raquo;</span>

                            </button>
                        </li>
                    }
                    else
                    {
                        <li class="page-item ">
                            <button @onclick="(() => NextPage())" class="page-link" aria-label="Next">
                                <span class="sr-only">Next</span>
                                <span aria-hidden="true">&raquo;</span>

                            </button>
                        </li>
                    }

                </ul>
            </nav>

            <table class="table table-bordered table-hover" style="width: 90%">
                <thead>
                    <tr>
                        <th style="vertical-align: middle;"></th>
                        <th style="vertical-align: middle; width: 14%;">
                            Task ID
                            <button @onclick="(() => OrderByTaskId())" class="btn btn-outline-primary">
                                @if (orderTaskId)
                                {
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-sort-numeric-down" viewBox="0 0 16 16">
                                        <path d="M12.438 1.668V7H11.39V2.684h-.051l-1.211.859v-.969l1.262-.906h1.046z" />
                                        <path fill-rule="evenodd" d="M11.36 14.098c-1.137 0-1.708-.657-1.762-1.278h1.004c.058.223.343.45.773.45.824 0 1.164-.829 1.133-1.856h-.059c-.148.39-.57.742-1.261.742-.91 0-1.72-.613-1.72-1.758 0-1.148.848-1.835 1.973-1.835 1.09 0 2.063.636 2.063 2.687 0 1.867-.723 2.848-2.145 2.848zm.062-2.735c.504 0 .933-.336.933-.972 0-.633-.398-1.008-.94-1.008-.52 0-.927.375-.927 1 0 .64.418.98.934.98z" />
                                        <path d="M4.5 2.5a.5.5 0 0 0-1 0v9.793l-1.146-1.147a.5.5 0 0 0-.708.708l2 1.999.007.007a.497.497 0 0 0 .7-.006l2-2a.5.5 0 0 0-.707-.708L4.5 12.293V2.5z" />
                                    </svg>
                                }
                                else
                                {
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-sort-numeric-down-alt" viewBox="0 0 16 16">
                                        <path fill-rule="evenodd" d="M11.36 7.098c-1.137 0-1.708-.657-1.762-1.278h1.004c.058.223.343.45.773.45.824 0 1.164-.829 1.133-1.856h-.059c-.148.39-.57.742-1.261.742-.91 0-1.72-.613-1.72-1.758 0-1.148.848-1.836 1.973-1.836 1.09 0 2.063.637 2.063 2.688 0 1.867-.723 2.848-2.145 2.848zm.062-2.735c.504 0 .933-.336.933-.972 0-.633-.398-1.008-.94-1.008-.52 0-.927.375-.927 1 0 .64.418.98.934.98z" />
                                        <path d="M12.438 8.668V14H11.39V9.684h-.051l-1.211.859v-.969l1.262-.906h1.046zM4.5 2.5a.5.5 0 0 0-1 0v9.793l-1.146-1.147a.5.5 0 0 0-.708.708l2 1.999.007.007a.497.497 0 0 0 .7-.006l2-2a.5.5 0 0 0-.707-.708L4.5 12.293V2.5z" />
                                    </svg>
                                }
                            </button>
                        </th>
                        <th style="vertical-align: middle; width: 14%;">
                            Project Code
                            <button @onclick="(() => OrderByTaskProjectCode())" class="btn btn-outline-primary">
                                @if (orderTaskProjectCode)
                                {
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-sort-alpha-down" viewBox="0 0 16 16">
                                        <path fill-rule="evenodd" d="M10.082 5.629 9.664 7H8.598l1.789-5.332h1.234L13.402 7h-1.12l-.419-1.371h-1.781zm1.57-.785L11 2.687h-.047l-.652 2.157h1.351z" />
                                        <path d="M12.96 14H9.028v-.691l2.579-3.72v-.054H9.098v-.867h3.785v.691l-2.567 3.72v.054h2.645V14zM4.5 2.5a.5.5 0 0 0-1 0v9.793l-1.146-1.147a.5.5 0 0 0-.708.708l2 1.999.007.007a.497.497 0 0 0 .7-.006l2-2a.5.5 0 0 0-.707-.708L4.5 12.293V2.5z" />
                                    </svg>
                                }
                                else
                                {
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-sort-alpha-down-alt" viewBox="0 0 16 16">
                                        <path d="M12.96 7H9.028v-.691l2.579-3.72v-.054H9.098v-.867h3.785v.691l-2.567 3.72v.054h2.645V7z" />
                                        <path fill-rule="evenodd" d="M10.082 12.629 9.664 14H8.598l1.789-5.332h1.234L13.402 14h-1.12l-.419-1.371h-1.781zm1.57-.785L11 9.688h-.047l-.652 2.156h1.351z" />
                                        <path d="M4.5 2.5a.5.5 0 0 0-1 0v9.793l-1.146-1.147a.5.5 0 0 0-.708.708l2 1.999.007.007a.497.497 0 0 0 .7-.006l2-2a.5.5 0 0 0-.707-.708L4.5 12.293V2.5z" />
                                    </svg>
                                }
                            </button>
                        </th>
                        <th style="vertical-align: middle; width: 14%;">
                            Status
                            <button @onclick="(() => OrderByTaskStatus())" class="btn btn-outline-primary">
                                @if (orderTaskStatus)
                                {
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-sort-numeric-down" viewBox="0 0 16 16">
                                        <path d="M12.438 1.668V7H11.39V2.684h-.051l-1.211.859v-.969l1.262-.906h1.046z" />
                                        <path fill-rule="evenodd" d="M11.36 14.098c-1.137 0-1.708-.657-1.762-1.278h1.004c.058.223.343.45.773.45.824 0 1.164-.829 1.133-1.856h-.059c-.148.39-.57.742-1.261.742-.91 0-1.72-.613-1.72-1.758 0-1.148.848-1.835 1.973-1.835 1.09 0 2.063.636 2.063 2.687 0 1.867-.723 2.848-2.145 2.848zm.062-2.735c.504 0 .933-.336.933-.972 0-.633-.398-1.008-.94-1.008-.52 0-.927.375-.927 1 0 .64.418.98.934.98z" />
                                        <path d="M4.5 2.5a.5.5 0 0 0-1 0v9.793l-1.146-1.147a.5.5 0 0 0-.708.708l2 1.999.007.007a.497.497 0 0 0 .7-.006l2-2a.5.5 0 0 0-.707-.708L4.5 12.293V2.5z" />
                                    </svg>
                                }
                                else
                                {
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-sort-numeric-down-alt" viewBox="0 0 16 16">
                                        <path fill-rule="evenodd" d="M11.36 7.098c-1.137 0-1.708-.657-1.762-1.278h1.004c.058.223.343.45.773.45.824 0 1.164-.829 1.133-1.856h-.059c-.148.39-.57.742-1.261.742-.91 0-1.72-.613-1.72-1.758 0-1.148.848-1.836 1.973-1.836 1.09 0 2.063.637 2.063 2.688 0 1.867-.723 2.848-2.145 2.848zm.062-2.735c.504 0 .933-.336.933-.972 0-.633-.398-1.008-.94-1.008-.52 0-.927.375-.927 1 0 .64.418.98.934.98z" />
                                        <path d="M12.438 8.668V14H11.39V9.684h-.051l-1.211.859v-.969l1.262-.906h1.046zM4.5 2.5a.5.5 0 0 0-1 0v9.793l-1.146-1.147a.5.5 0 0 0-.708.708l2 1.999.007.007a.497.497 0 0 0 .7-.006l2-2a.5.5 0 0 0-.707-.708L4.5 12.293V2.5z" />
                                    </svg>
                                }
                            </button>
                        </th>
                        <th style="vertical-align: middle; width: 14%;">
                            Progress
                            <button @onclick="(() => OrderByTaskProgress())" class="btn btn-outline-primary">
                                @if (orderTaskProgress)
                                {
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-sort-numeric-down" viewBox="0 0 16 16">
                                        <path d="M12.438 1.668V7H11.39V2.684h-.051l-1.211.859v-.969l1.262-.906h1.046z" />
                                        <path fill-rule="evenodd" d="M11.36 14.098c-1.137 0-1.708-.657-1.762-1.278h1.004c.058.223.343.45.773.45.824 0 1.164-.829 1.133-1.856h-.059c-.148.39-.57.742-1.261.742-.91 0-1.72-.613-1.72-1.758 0-1.148.848-1.835 1.973-1.835 1.09 0 2.063.636 2.063 2.687 0 1.867-.723 2.848-2.145 2.848zm.062-2.735c.504 0 .933-.336.933-.972 0-.633-.398-1.008-.94-1.008-.52 0-.927.375-.927 1 0 .64.418.98.934.98z" />
                                        <path d="M4.5 2.5a.5.5 0 0 0-1 0v9.793l-1.146-1.147a.5.5 0 0 0-.708.708l2 1.999.007.007a.497.497 0 0 0 .7-.006l2-2a.5.5 0 0 0-.707-.708L4.5 12.293V2.5z" />
                                    </svg>
                                }
                                else
                                {
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-sort-numeric-down-alt" viewBox="0 0 16 16">
                                        <path fill-rule="evenodd" d="M11.36 7.098c-1.137 0-1.708-.657-1.762-1.278h1.004c.058.223.343.45.773.45.824 0 1.164-.829 1.133-1.856h-.059c-.148.39-.57.742-1.261.742-.91 0-1.72-.613-1.72-1.758 0-1.148.848-1.836 1.973-1.836 1.09 0 2.063.637 2.063 2.688 0 1.867-.723 2.848-2.145 2.848zm.062-2.735c.504 0 .933-.336.933-.972 0-.633-.398-1.008-.94-1.008-.52 0-.927.375-.927 1 0 .64.418.98.934.98z" />
                                        <path d="M12.438 8.668V14H11.39V9.684h-.051l-1.211.859v-.969l1.262-.906h1.046zM4.5 2.5a.5.5 0 0 0-1 0v9.793l-1.146-1.147a.5.5 0 0 0-.708.708l2 1.999.007.007a.497.497 0 0 0 .7-.006l2-2a.5.5 0 0 0-.707-.708L4.5 12.293V2.5z" />
                                    </svg>
                                }
                            </button>
                        </th>
                        <th style="vertical-align: middle; width: 14%;">
                            Deadline
                            <button @onclick="(() => OrderByTaskDeadline())" class="btn btn-outline-primary">
                                @if (orderTaskDeadline)
                                {
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-sort-numeric-down" viewBox="0 0 16 16">
                                        <path d="M12.438 1.668V7H11.39V2.684h-.051l-1.211.859v-.969l1.262-.906h1.046z" />
                                        <path fill-rule="evenodd" d="M11.36 14.098c-1.137 0-1.708-.657-1.762-1.278h1.004c.058.223.343.45.773.45.824 0 1.164-.829 1.133-1.856h-.059c-.148.39-.57.742-1.261.742-.91 0-1.72-.613-1.72-1.758 0-1.148.848-1.835 1.973-1.835 1.09 0 2.063.636 2.063 2.687 0 1.867-.723 2.848-2.145 2.848zm.062-2.735c.504 0 .933-.336.933-.972 0-.633-.398-1.008-.94-1.008-.52 0-.927.375-.927 1 0 .64.418.98.934.98z" />
                                        <path d="M4.5 2.5a.5.5 0 0 0-1 0v9.793l-1.146-1.147a.5.5 0 0 0-.708.708l2 1.999.007.007a.497.497 0 0 0 .7-.006l2-2a.5.5 0 0 0-.707-.708L4.5 12.293V2.5z" />
                                    </svg>
                                }
                                else
                                {
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-sort-numeric-down-alt" viewBox="0 0 16 16">
                                        <path fill-rule="evenodd" d="M11.36 7.098c-1.137 0-1.708-.657-1.762-1.278h1.004c.058.223.343.45.773.45.824 0 1.164-.829 1.133-1.856h-.059c-.148.39-.57.742-1.261.742-.91 0-1.72-.613-1.72-1.758 0-1.148.848-1.836 1.973-1.836 1.09 0 2.063.637 2.063 2.688 0 1.867-.723 2.848-2.145 2.848zm.062-2.735c.504 0 .933-.336.933-.972 0-.633-.398-1.008-.94-1.008-.52 0-.927.375-.927 1 0 .64.418.98.934.98z" />
                                        <path d="M12.438 8.668V14H11.39V9.684h-.051l-1.211.859v-.969l1.262-.906h1.046zM4.5 2.5a.5.5 0 0 0-1 0v9.793l-1.146-1.147a.5.5 0 0 0-.708.708l2 1.999.007.007a.497.497 0 0 0 .7-.006l2-2a.5.5 0 0 0-.707-.708L4.5 12.293V2.5z" />
                                    </svg>
                                }
                            </button>
                        </th>
                        <th style="vertical-align: middle; width: 14%;">
                            Assignee
                            <button @onclick="(() => OrderByTaskAssigneeUsername())" class="btn btn-outline-primary">
                                @if (orderTaskAssigneeUsername)
                                {
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-sort-alpha-down" viewBox="0 0 16 16">
                                        <path fill-rule="evenodd" d="M10.082 5.629 9.664 7H8.598l1.789-5.332h1.234L13.402 7h-1.12l-.419-1.371h-1.781zm1.57-.785L11 2.687h-.047l-.652 2.157h1.351z" />
                                        <path d="M12.96 14H9.028v-.691l2.579-3.72v-.054H9.098v-.867h3.785v.691l-2.567 3.72v.054h2.645V14zM4.5 2.5a.5.5 0 0 0-1 0v9.793l-1.146-1.147a.5.5 0 0 0-.708.708l2 1.999.007.007a.497.497 0 0 0 .7-.006l2-2a.5.5 0 0 0-.707-.708L4.5 12.293V2.5z" />
                                    </svg>
                                }
                                else
                                {
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-sort-alpha-down-alt" viewBox="0 0 16 16">
                                        <path d="M12.96 7H9.028v-.691l2.579-3.72v-.054H9.098v-.867h3.785v.691l-2.567 3.72v.054h2.645V7z" />
                                        <path fill-rule="evenodd" d="M10.082 12.629 9.664 14H8.598l1.789-5.332h1.234L13.402 14h-1.12l-.419-1.371h-1.781zm1.57-.785L11 9.688h-.047l-.652 2.156h1.351z" />
                                        <path d="M4.5 2.5a.5.5 0 0 0-1 0v9.793l-1.146-1.147a.5.5 0 0 0-.708.708l2 1.999.007.007a.497.497 0 0 0 .7-.006l2-2a.5.5 0 0 0-.707-.708L4.5 12.293V2.5z" />
                                    </svg>
                                }
                            </button>
                        </th>
                        <th style="vertical-align: middle; width: 14%;">
                            Description
                            <button @onclick="(() => OrderByTaskDescription())" class="btn btn-outline-primary">
                                @if (orderTaskDescription)
                                {
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-sort-alpha-down" viewBox="0 0 16 16">
                                        <path fill-rule="evenodd" d="M10.082 5.629 9.664 7H8.598l1.789-5.332h1.234L13.402 7h-1.12l-.419-1.371h-1.781zm1.57-.785L11 2.687h-.047l-.652 2.157h1.351z" />
                                        <path d="M12.96 14H9.028v-.691l2.579-3.72v-.054H9.098v-.867h3.785v.691l-2.567 3.72v.054h2.645V14zM4.5 2.5a.5.5 0 0 0-1 0v9.793l-1.146-1.147a.5.5 0 0 0-.708.708l2 1.999.007.007a.497.497 0 0 0 .7-.006l2-2a.5.5 0 0 0-.707-.708L4.5 12.293V2.5z" />
                                    </svg>
                                }
                                else
                                {
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-sort-alpha-down-alt" viewBox="0 0 16 16">
                                        <path d="M12.96 7H9.028v-.691l2.579-3.72v-.054H9.098v-.867h3.785v.691l-2.567 3.72v.054h2.645V7z" />
                                        <path fill-rule="evenodd" d="M10.082 12.629 9.664 14H8.598l1.789-5.332h1.234L13.402 14h-1.12l-.419-1.371h-1.781zm1.57-.785L11 9.688h-.047l-.652 2.156h1.351z" />
                                        <path d="M4.5 2.5a.5.5 0 0 0-1 0v9.793l-1.146-1.147a.5.5 0 0 0-.708.708l2 1.999.007.007a.497.497 0 0 0 .7-.006l2-2a.5.5 0 0 0-.707-.708L4.5 12.293V2.5z" />
                                    </svg>
                                }
                            </button>
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var task in projectTaskList)
                    {
                        <tr>
                            @if (authService.CurrentRoleName == "administrator" || (authService.CurrentRoleName == "projectmanager" && task.AssigneeUsername == loggedIn) || 
                            (authService.CurrentRoleName == "developer" && task.AssigneeUsername == loggedIn) )
                            {
                                <td style="vertical-align: middle;"><button class="btn btn-outline-danger" @onclick="(() => clickedButton(task.ProjectTaskId))">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pen" viewBox="0 0 16 16">
                                            <path d="m13.498.795.149-.149a1.207 1.207 0 1 1 1.707 1.708l-.149.148a1.5 1.5 0 0 1-.059 2.059L4.854 14.854a.5.5 0 0 1-.233.131l-4 1a.5.5 0 0 1-.606-.606l1-4a.5.5 0 0 1 .131-.232l9.642-9.642a.5.5 0 0 0-.642.056L6.854 4.854a.5.5 0 1 1-.708-.708L9.44.854A1.5 1.5 0 0 1 11.5.796a1.5 1.5 0 0 1 1.998-.001zm-.644.766a.5.5 0 0 0-.707 0L1.95 11.756l-.764 3.057 3.057-.764L14.44 3.854a.5.5 0 0 0 0-.708l-1.585-1.585z" />
                                        </svg>
                                        @*Edit*@
                                    
                                </button></td>
                            }
                            else
                            {
                                <td style=" vertical-align: middle;"></td>
                            }
                            <td style="vertical-align: middle;">@task.ProjectTaskId</td>
                            <td style="vertical-align: middle;">@task.ParentProjectProjectCode</td>
                            <td style="vertical-align: middle;">@GetStatusName(task.Status)</td>
                            <td style="vertical-align: middle;">@task.Progress%</td>
                            @if (authService.CurrentRoleName == "developer" 
                            || authService.CurrentRoleName == "administrator"
                            || authService.CurrentRoleName == "projectmanager"
                            )
                            {
                                if(DeadlineSoonOrPast(task) == 0)
                                {
                                    <td style="vertical-align: middle;">@task.Deadline.ToShortDateString()</td>
                                }else if(DeadlineSoonOrPast(task) == 1){

                                    <td style="vertical-align: middle; background: #FFC107">@task.Deadline.ToShortDateString()</td>
                                }
                                else
                                {
                                    <td style="vertical-align: middle; background: #DC3545">@task.Deadline.ToShortDateString()</td>
                                }
                            }
                            else
                            {
                                <td style="vertical-align: middle;">@task.Deadline.ToShortDateString()</td>
                            }
                            <td style="vertical-align: middle;">@NameOfUser(task)</td>
                            <td style="vertical-align: middle;">@task.Description</td>

                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <table class="table" style="width: 90%">
                <thead>
                    <tr>
                        <th><h4>No tasks yet.</h4></th>
                    </tr>
                </thead>
            </table>
        }

}
}
else
{
    @if (authService.CurrentRoleName == "administrator" || authService.CurrentRoleName == "projectmanager")
    {
        <table class="table" style="width: 90%">
            <thead>
                <tr>
                    <th style="width: 6%" @onclick="(() => ShowAllTasks())"><h2>Tasks</h2></th>
                    <th style="width: 27%"><h2>> Single Project Tasks</h2></th>
                    <th style="width: 40%">
                        <h3><button class="btn btn-success" @onclick="(() => createTask())">Create a Task for this Project</button></h3>
                    </th>
                    <th>
                        <h3><button class="btn btn-secondary" @onclick="(() => BackToProjects())">Back to Projects</button></h3>
                    </th>
                    <th>
                        <h3><button class="btn btn-primary" @onclick="(() => ShowAllTasks())">Show All Tasks</button></h3>
                    </th>
                </tr>
            </thead>
        </table>
    
        @if (CheckNumOfTasks(projcode))
        {


            <nav aria-label="Page navigation example" style="width: 90%">
                <ul class="pagination justify-content-center">
                    @if (pagenum <= 1)
                    {
                        <li class="page-item disabled">
                            <button disabled @onclick="(() => PrevPage())" class="page-link" aria-label="Previous">
                                <span aria-hidden="true">&laquo;</span>
                                <span class="sr-only">Previous</span>
                            </button>
                        </li>
                    }
                    else
                    {
                        <li class="page-item ">
                            <button @onclick="(() => PrevPage())" class="page-link" aria-label="Previous">
                                <span aria-hidden="true">&laquo;</span>
                                <span class="sr-only">Previous</span>
                            </button>
                        </li>
                    }
                    <li class="page-item"><a class="page-link">@pagenum / @MaxPages()</a></li>

                    @if (pagenum >= MaxPages())
                    {
                        <li class="page-item disabled">
                            <button disabled @onclick="(() => NextPage())" class="page-link" aria-label="Next">
                                <span class="sr-only">Next</span>
                                <span aria-hidden="true">&raquo;</span>

                            </button>
                        </li>
                    }
                    else
                    {
                        <li class="page-item ">
                            <button @onclick="(() => NextPage())" class="page-link" aria-label="Next">
                                <span class="sr-only">Next</span>
                                <span aria-hidden="true">&raquo;</span>

                            </button>
                        </li>
                    }

                </ul>
            </nav>

            <table class="table table-bordered table-hover" style="width: 80%">
                <thead>
                    <tr>
                        <th style="vertical-align: middle;"></th>
                        <th style="vertical-align: middle;">Task ID</th>
                        <th style="vertical-align: middle;">Project Code</th>
                        <th style="vertical-align: middle;">Status</th>
                        <th style="vertical-align: middle;">Progress</th>
                        <th style="vertical-align: middle;">Deadline</th>
                        <th style="vertical-align: middle;">Assignee</th>
                        <th style="vertical-align: middle; ">Description</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var task in projectTaskList)
                    {
                        if (task.ParentProjectProjectCode == projcode)
                        {
                            <tr>
                                <td style="width: 5%; vertical-align: middle;"><button class="btn btn-outline-danger" @onclick="(() => clickedButton(task.ProjectTaskId))" >Edit</button></td>
                                <td style="vertical-align: middle;">@task.ProjectTaskId</td>
                                <td style="vertical-align: middle;">@task.ParentProjectProjectCode</td>
                                <td style="vertical-align: middle;">@GetStatusName(task.Status)</td>
                                <td style="vertical-align: middle;">@task.Progress%</td>
                                <td style="vertical-align: middle;">@task.Deadline.ToShortDateString()</td>
                                <td style="vertical-align: middle;">@NameOfUser(task)</td>
                                <td style="vertical-align: middle;">@task.Description</td>

                            </tr>
                        }
                    }
                </tbody>
            </table>
        }
        else
        {
            <table class="table" style="width: 90%">
                <thead>
                    <tr>
                        <th><h4>No tasks yet.</h4></th>
                    </tr>
                </thead>
            </table>
        }
    }

}

@code {

    [Parameter]
    public string? projcode { get; set; }

    string currentRole = "";
    string loggedIn = "";
    string loggedInName = "";
    string loggedInSurname = "";

    private List<ProjectTask> projectTaskList = new List<ProjectTask>();
    private int pagesize = 10;
    private int pagenum = 1;

    private bool orderTaskId = true;
    private bool orderTaskProjectCode = true;
    private bool orderTaskStatus = true;
    private bool orderTaskProgress = true;
    private bool orderTaskDeadline = true;
    private bool orderTaskAssigneeUsername = true;
    private bool orderTaskDescription = true;

    private bool managedByMe = true;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await ProjectService.GetProjects();
        await ProjectTaskService.GetProjectTasks();
        //Console.WriteLine(ProjectService.Projects.First().ProjectCode);
        await UserService.GetUsers();
        //foreach (var proj in ProjectService.Projects)
        //{
        //    proj.ProjectManager = UserService.Users.SingleOrDefault(u => u.Username == proj.ProjectManagerUsername, new User() { Username = "Error" });
        //}
        //username = await LocalStorage.GetStringAsync("user");
        //username = null;
        currentRole = authService.CurrentRoleName;
        authService.SetCurrentRoleName(await LocalStorage.GetStringAsync("loggedInRoleName"));
        loggedIn = await LocalStorage.GetStringAsync("loggedIn");
        loggedInName = await LocalStorage.GetStringAsync("loggedInName");
        loggedInSurname = await LocalStorage.GetStringAsync("loggedInSurname");
        if (authService.CurrentRoleName == "administrator")
        {
            projectTaskList = PaginationService.GetProjectTasksPage(ProjectTaskService.ProjectTasks, pagesize, pagenum);
        }
        else if(authService.CurrentRoleName == "projectmanager")
        {
            ManagedByMe();
        }
        else if (authService.CurrentRoleName == "developer")
        {
            AssignedToMe();
        }
        //authService.SetCurrentRoleName("administrator");
    }


    protected async void clickedButton(int id)
    {
        //var role1 = new Role() { RoleName = "Blabla"};
        //await RoleService.CreateRole(role1);
        //role1 = await RoleService.GetRoleWithName(role1.RoleName);
        Console.WriteLine("Button clicked");
        //role1.RoleName = "Blabla2";
        //await RoleService.UpdateRole(role1);
        //await LocalStorage.SaveStringAsync("key", "value");
        //Console.WriteLine(await LocalStorage.GetStringAsync("key"));
        if(projcode == null)
        {
            NavigationManager.NavigateTo($"/edittask/{id}");
        }
        else
        {

            NavigationManager.NavigateTo($"/edittask/{projcode}/{id}");
        }
        //await RoleService.CreateRole(new Role() { RoleId = 4, RoleName = new string("Blabla") });
        //await RoleService.GetRoles();
    }

    private void BackToProjects()
    {
        NavigationManager.NavigateTo("/projects");
    }

    private void ShowAllTasks()
    {
        if(authService.CurrentRoleName == "projectmanager")
        {
            ManagedByMe();
        }
        NavigationManager.NavigateTo("/tasks");
    }

    protected async void openTasks(string projcode)
    {
        //var role1 = new Role() { RoleName = "Blabla"};
        //await RoleService.CreateRole(role1);
        //role1 = await RoleService.GetRoleWithName(role1.RoleName);
        Console.WriteLine("Button clicked");
        //role1.RoleName = "Blabla2";
        //await RoleService.UpdateRole(role1);
        //await LocalStorage.SaveStringAsync("key", "value");
        //Console.WriteLine(await LocalStorage.GetStringAsync("key"));

        //NavigationManager.NavigateTo($"/tasks/{projcode}");

        //await RoleService.CreateRole(new Role() { RoleId = 4, RoleName = new string("Blabla") });
        //await RoleService.GetRoles();
    }

    protected void createTask()
    {
        if(projcode == null)
        {
            NavigationManager.NavigateTo("/createtask");
        }
        else
        {
            NavigationManager.NavigateTo($"/createtask/{projcode}");
        }
    }

    private string NameOfUser(ProjectTask p)
    {
        p.Assignee = UserService.Users.SingleOrDefault(u => u.Username == p.AssigneeUsername, new User() { Username = "Error", Name = "Error", Surname = "Error" });
        return p.Assignee.Name + " " + p.Assignee.Surname + "  [" + p.Assignee.Username + "]";
    }

    private bool CheckNumOfTasks(string projcode)
    {
        if (ProjectTaskService.ProjectTasks.Where(t => t.ParentProjectProjectCode == projcode).ToArray().Length > 0) return true;
        return false;
    }

    private bool CheckNumOfTasks(List<ProjectTask> list)
    {
        return list.Count > 0;
    }

    private string GetStatusName(int num)
    {
        if (num == 0) return "New";
        else if (num == 1) return "In progress";
        else if (num == 2) return "Finished";
        else return "Error";
    }

    private void ManagedByMe()
    {
        managedByMe = true;
        //Console.WriteLine(loggedIn);
        ProjectTaskService.GetProjectTasks();
        ProjectTaskService.ProjectTasks = ProjectService.Projects.Where(p => p.ProjectManagerUsername == loggedIn).Join(ProjectTaskService.ProjectTasks, x => x.ProjectCode, y => y.ParentProjectProjectCode, (x, y) => y).ToList();
        //ProjectTaskService.ProjectTasks = FilterManagedByMe();
        projectTaskList = PaginationService.GetProjectTasksPage(ProjectTaskService.ProjectTasks, pagesize, pagenum);
        StateHasChanged();
    }


    private List<ProjectTask> FilterManagedByMe()
    {
        //Console.WriteLine(ProjectService.Projects.Where(p => p.ProjectManagerUsername == loggedIn).Join(ProjectTaskService.ProjectTasks, x => x.ProjectCode, y => y.ParentProjectProjectCode, (x, y) => y).ToList().Count);
        return ProjectService.Projects.Where(p => p.ProjectManagerUsername == loggedIn).Join(ProjectTaskService.ProjectTasks, x => x.ProjectCode, y => y.ParentProjectProjectCode, (x, y) => y).ToList();

    }

    private void AssignedToMe()
    {
        ProjectTaskService.GetProjectTasks();
        ProjectTaskService.ProjectTasks = ProjectTaskService.ProjectTasks.Where(t => t.AssigneeUsername == loggedIn).ToList();
        projectTaskList = PaginationService.GetProjectTasksPage(ProjectTaskService.ProjectTasks, pagesize, pagenum);
        StateHasChanged();
    }

    private List<ProjectTask> FilterAssignedToMe()
    {
        return ProjectTaskService.ProjectTasks.Where(t => t.AssigneeUsername == loggedIn).ToList();
    }

    private void OtherProjects()
    {
        managedByMe = false;
        ProjectTaskService.GetProjectTasks();
        projectTaskList = ProjectService.Projects.Where(p => p.ProjectManagerUsername != loggedIn).Join(ProjectTaskService.ProjectTasks, x => x.ProjectCode, y => y.ParentProjectProjectCode, (x, y) => y).Where(t => t.AssigneeUsername == loggedIn).ToList();
        StateHasChanged();
    }

    private List<ProjectTask> FilterOtherProjects()
    {
        return ProjectService.Projects.Where(p => p.ProjectManagerUsername != loggedIn).Join(ProjectTaskService.ProjectTasks, x => x.ProjectCode, y => y.ParentProjectProjectCode, (x, y) => y).Where(t => t.AssigneeUsername == loggedIn).ToList();

    }

    private int DeadlineSoonOrPast(ProjectTask t)
    {
        if (t.Deadline.CompareTo(DateTime.Today) < 0) return 2;
        else  if (t.Deadline.CompareTo(DateTime.Today.AddDays(5)) <= 0) return 1;
        else return 0;
    }

    private double NumOfTasksOverdue(Project p)
    {
        List<ProjectTask> list = ProjectTaskService.ProjectTasks.Where(t => t.ParentProjectProjectCode == p.ProjectCode && t.Deadline.CompareTo(DateTime.Today.AddDays(2)) <= 0).ToList();
        return list.Count;
    }

    private void NextPage()
    {
        if (pagenum >= MaxPages())
        {
            return;
        }
        else
        {
            ++pagenum;
            //Console.WriteLine(ProjectTaskService.ProjectTasks.Count);
            if(authService.CurrentRoleName == "projectmanager" && managedByMe)
            {
                projectTaskList = PaginationService.GetProjectTasksPage(FilterManagedByMe(), pagesize, pagenum);
            }
            else if (authService.CurrentRoleName == "projectmanager" && !managedByMe)
            {
                projectTaskList = PaginationService.GetProjectTasksPage(FilterOtherProjects(), pagesize, pagenum);
            }
            else if (authService.CurrentRoleName == "administrator" || authService.CurrentRoleName == "developer")
            {
                projectTaskList = PaginationService.GetProjectTasksPage(ProjectTaskService.ProjectTasks, pagesize, pagenum);
            }

        }
    }

    private void PrevPage()
    {
        if (pagenum <= 1)
        {
            return;
        }
        else
        {
            --pagenum;
            if (authService.CurrentRoleName == "projectmanager" && managedByMe)
            {
                projectTaskList = PaginationService.GetProjectTasksPage(FilterManagedByMe(), pagesize, pagenum);
            }
            else if (authService.CurrentRoleName == "projectmanager" && !managedByMe)
            {
                projectTaskList = PaginationService.GetProjectTasksPage(FilterOtherProjects(), pagesize, pagenum);
            }
            else if (authService.CurrentRoleName == "administrator" || authService.CurrentRoleName == "developer")
            {
                projectTaskList = PaginationService.GetProjectTasksPage(ProjectTaskService.ProjectTasks, pagesize, pagenum);
            }
            //projectTaskList = PaginationService.GetProjectTasksPage(ProjectTaskService.ProjectTasks, pagesize, pagenum);
        }
    }

    private int MaxPages()
    {
        if (ProjectTaskService.ProjectTasks.Count == (ProjectTaskService.ProjectTasks.Count / pagesize) * pagesize) return ProjectTaskService.ProjectTasks.Count / pagesize;
        else return ProjectTaskService.ProjectTasks.Count / pagesize + 1;
    }


    private void OrderByTaskId()
    {
        orderTaskId = !orderTaskId;
        var recordsToSort = ProjectTaskService.ProjectTasks.AsQueryable();
        if(authService.CurrentRoleName == "developer")
        {
            recordsToSort = FilterAssignedToMe().AsQueryable();
        }
        else if (authService.CurrentRoleName == "projectmanager")
        {
            recordsToSort = FilterManagedByMe().AsQueryable();
        }

        if (orderTaskId)
        {
            recordsToSort = recordsToSort.OrderBy(t => t.ProjectTaskId);
        }
        else
        {
            recordsToSort = recordsToSort.OrderByDescending(t => t.ProjectTaskId);
        }
        projectTaskList = PaginationService.GetProjectTasksPage(recordsToSort.ToList(), pagesize, pagenum);
        ProjectTaskService.ProjectTasks = recordsToSort.ToList();
        StateHasChanged();
    }

    private void OrderByTaskProjectCode()
    {
        orderTaskProjectCode = !orderTaskProjectCode;
        var recordsToSort = ProjectTaskService.ProjectTasks.AsQueryable();
        if (authService.CurrentRoleName == "developer")
        {
            recordsToSort = FilterAssignedToMe().AsQueryable();
        }
        else if (authService.CurrentRoleName == "projectmanager")
        {
            recordsToSort = FilterManagedByMe().AsQueryable();
        }
        if (orderTaskProjectCode)
        {
            recordsToSort = recordsToSort.OrderBy(t => t.ParentProjectProjectCode);
        }
        else
        {
            recordsToSort = recordsToSort.OrderByDescending(t => t.ParentProjectProjectCode);
        }
        projectTaskList = PaginationService.GetProjectTasksPage(recordsToSort.ToList(), pagesize, pagenum);
        ProjectTaskService.ProjectTasks = recordsToSort.ToList();
        StateHasChanged();
    }

    private void OrderByTaskStatus()
    {
        orderTaskStatus = !orderTaskStatus;
        var recordsToSort = ProjectTaskService.ProjectTasks.AsQueryable();
        if (authService.CurrentRoleName == "developer")
        {
            recordsToSort = FilterAssignedToMe().AsQueryable();
        }
        else if (authService.CurrentRoleName == "projectmanager")
        {
            recordsToSort = FilterManagedByMe().AsQueryable();
        }
        if (orderTaskStatus)
        {
            recordsToSort = recordsToSort.OrderBy(t => t.Status);
        }
        else
        {
            recordsToSort = recordsToSort.OrderByDescending(t => t.Status);
        }
        projectTaskList = PaginationService.GetProjectTasksPage(recordsToSort.ToList(), pagesize, pagenum);
        ProjectTaskService.ProjectTasks = recordsToSort.ToList();
        StateHasChanged();
    }

    private void OrderByTaskProgress()
    {
        orderTaskProgress = !orderTaskProgress;
        var recordsToSort = ProjectTaskService.ProjectTasks.AsQueryable();
        if (authService.CurrentRoleName == "developer")
        {
            recordsToSort = FilterAssignedToMe().AsQueryable();
        }
        else if (authService.CurrentRoleName == "projectmanager")
        {
            recordsToSort = FilterManagedByMe().AsQueryable();
        }
        if (orderTaskProgress)
        {
            recordsToSort = recordsToSort.OrderBy(t => t.Progress);
        }
        else
        {
            recordsToSort = recordsToSort.OrderByDescending(t => t.Progress);
        }
        projectTaskList = PaginationService.GetProjectTasksPage(recordsToSort.ToList(), pagesize, pagenum);
        ProjectTaskService.ProjectTasks = recordsToSort.ToList();
        StateHasChanged();
    }

    private void OrderByTaskDeadline()
    {
        orderTaskDeadline = !orderTaskDeadline;
        var recordsToSort = ProjectTaskService.ProjectTasks.AsQueryable();
        if (authService.CurrentRoleName == "developer")
        {
            recordsToSort = FilterAssignedToMe().AsQueryable();
        }
        else if (authService.CurrentRoleName == "projectmanager")
        {
            recordsToSort = FilterManagedByMe().AsQueryable();
        }
        if (orderTaskDeadline)
        {
            recordsToSort = recordsToSort.OrderBy(t => t.Deadline);
        }
        else
        {
            recordsToSort = recordsToSort.OrderByDescending(t => t.Deadline);
        }
        projectTaskList = PaginationService.GetProjectTasksPage(recordsToSort.ToList(), pagesize, pagenum);
        ProjectTaskService.ProjectTasks = recordsToSort.ToList();
        StateHasChanged();
    }

    private void OrderByTaskAssigneeUsername()
    {
        orderTaskAssigneeUsername = !orderTaskAssigneeUsername;
        var recordsToSort = ProjectTaskService.ProjectTasks.AsQueryable();
        if (authService.CurrentRoleName == "developer")
        {
            recordsToSort = FilterAssignedToMe().AsQueryable();
        }
        else if (authService.CurrentRoleName == "projectmanager")
        {
            recordsToSort = FilterManagedByMe().AsQueryable();
        }
        if (orderTaskAssigneeUsername)
        {
            recordsToSort = recordsToSort.OrderBy(t => t.AssigneeUsername);
        }
        else
        {
            recordsToSort = recordsToSort.OrderByDescending(t => t.AssigneeUsername);
        }
        projectTaskList = PaginationService.GetProjectTasksPage(recordsToSort.ToList(), pagesize, pagenum);
        ProjectTaskService.ProjectTasks = recordsToSort.ToList();
        StateHasChanged();
    }

    private void OrderByTaskDescription()
    {
        orderTaskDescription = !orderTaskDescription;
        var recordsToSort = ProjectTaskService.ProjectTasks.AsQueryable();
        if(authService.CurrentRoleName == "developer")
        {
            recordsToSort = FilterAssignedToMe().AsQueryable();
        }
        else if (authService.CurrentRoleName == "projectmanager")
        {
            recordsToSort = FilterManagedByMe().AsQueryable();
        }
        if (orderTaskDescription)
        {
            recordsToSort = recordsToSort.OrderBy(t => t.Description);
        }
        else
        {
            recordsToSort = recordsToSort.OrderByDescending(t => t.Description);
        }
        projectTaskList = PaginationService.GetProjectTasksPage(recordsToSort.ToList(), pagesize, pagenum);
        ProjectTaskService.ProjectTasks = recordsToSort.ToList();
        StateHasChanged();
    }

    public async Task<bool> testCreateTask(ProjectTask t)
    {
        ProjectTask task = t;
        if (task.ParentProjectProjectCode == null || task.ParentProjectProjectCode == "" ||
            task.Deadline.CompareTo(DateTime.Today) < 0 ||
            task.AssigneeUsername == null || task.AssigneeUsername == "" ||
            task.Description == null || task.Description == "")
        {
            return false;
        }
        else
        {
            var result = await ProjectTaskService.CreateProjectTask(task);
            if (result.IsSuccessStatusCode)
            {
                return true;
            }
            else
            {
                return false;
            }
        }
    }

    public async Task<bool> testEditTask(ProjectTask t)
    {
        await ProjectTaskService.GetProjectTasks();
        ProjectTask task = ProjectTaskService.ProjectTasks.Single(ta => ta.ParentProjectProjectCode == t.ParentProjectProjectCode && ta.Description == t.Description && ta.AssigneeUsername == t.AssigneeUsername && ta.Status == t.Status);
        if (task.ParentProjectProjectCode == null || task.ParentProjectProjectCode == "" ||
            //task.Deadline.CompareTo(DateTime.Today) < 0 ||
            task.AssigneeUsername == null || task.AssigneeUsername == "")
        {
            return false;
        }
        else
        {
            var result = await ProjectTaskService.UpdateProjectTask(task, task.ProjectTaskId);
            if (result.IsSuccessStatusCode)
            {
                return true;
            }
            else
            {
                return false;
            }
        }
    }

    public async Task<bool> testDeleteTask(ProjectTask t)
    {
        await ProjectTaskService.GetProjectTasks();
        ProjectTask task = ProjectTaskService.ProjectTasks.Single(ta => ta.ParentProjectProjectCode == t.ParentProjectProjectCode && ta.Description == t.Description && ta.AssigneeUsername == t.AssigneeUsername && ta.Status == t.Status);
        await ProjectTaskService.DeleteProjectTask(task.ProjectTaskId);
        return true;
    }

}
