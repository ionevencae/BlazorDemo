@page "/users"
@inject ILocalStorage LocalStorage
@inject AuthService authService
@inject IUserService UserService
@inject IRoleService RoleService
@inject IPaginationService PaginationService
@inject NavigationManager NavigationManager

@if (authService.CurrentRoleName == "administrator")
{


    <table class="table" style="width: 90%">
        <thead>
            <tr>
                <th style="width: 8%"><h2>Users</h2></th>
                <th>
                    <h3><button class="btn btn-success" @onclick="(() => createUser())">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus" viewBox="0 0 16 16">
                                <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
                            </svg>
                        Create a new User</button></h3>
                </th>
            </tr>
        </thead>
    </table>

    <nav aria-label="Page navigation example" style="width: 90%">
        <ul class="pagination justify-content-center">
                @if (pagenum <= 1)
                {
                    <li class="page-item disabled">
                        <button disabled @onclick="(() => PrevPage())" class="page-link" aria-label="Previous">
                            <span aria-hidden="true">&laquo;</span>
                            <span class="sr-only">Previous</span>
                        </button>
                    </li>
                }
                else
                {
                    <li class="page-item ">
                        <button @onclick="(() => PrevPage())" class="page-link" aria-label="Previous">
                            <span aria-hidden="true">&laquo;</span>
                            <span class="sr-only">Previous</span>
                        </button>
                    </li>
                }
            <li class="page-item"><a class="page-link">@pagenum / @MaxPages()</a></li>
            
                @if (pagenum >= MaxPages())
                {
                    <li class="page-item disabled">
                        <button disabled @onclick="(() => NextPage())" class="page-link" aria-label="Next">
                            <span class="sr-only">Next</span>
                            <span aria-hidden="true">&raquo;</span>

                        </button>
                    </li>
                }
                else
                {
                <li class="page-item ">
                    <button  @onclick="(() => NextPage())" class="page-link" aria-label="Next">
                        <span class="sr-only">Next</span>
                        <span aria-hidden="true">&raquo;</span>

                    </button>
                </li>
                }
            
        </ul>
    </nav>

    <table class="table table-bordered table-hover" style="width: 90%">
        <thead>
            <tr>
                <th style="vertical-align: middle;"></th>
                <th style="vertical-align: middle; width: 15%;">
                    Role
                    <button @onclick="(() => OrderByRoleId())" class="btn btn-outline-primary">
                        @if (orderRoleId)
                        {
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-sort-numeric-down" viewBox="0 0 16 16">
                                <path d="M12.438 1.668V7H11.39V2.684h-.051l-1.211.859v-.969l1.262-.906h1.046z" />
                                <path fill-rule="evenodd" d="M11.36 14.098c-1.137 0-1.708-.657-1.762-1.278h1.004c.058.223.343.45.773.45.824 0 1.164-.829 1.133-1.856h-.059c-.148.39-.57.742-1.261.742-.91 0-1.72-.613-1.72-1.758 0-1.148.848-1.835 1.973-1.835 1.09 0 2.063.636 2.063 2.687 0 1.867-.723 2.848-2.145 2.848zm.062-2.735c.504 0 .933-.336.933-.972 0-.633-.398-1.008-.94-1.008-.52 0-.927.375-.927 1 0 .64.418.98.934.98z" />
                                <path d="M4.5 2.5a.5.5 0 0 0-1 0v9.793l-1.146-1.147a.5.5 0 0 0-.708.708l2 1.999.007.007a.497.497 0 0 0 .7-.006l2-2a.5.5 0 0 0-.707-.708L4.5 12.293V2.5z" />
                            </svg>
                        }
                        else
                        {
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-sort-numeric-down-alt" viewBox="0 0 16 16">
                                <path fill-rule="evenodd" d="M11.36 7.098c-1.137 0-1.708-.657-1.762-1.278h1.004c.058.223.343.45.773.45.824 0 1.164-.829 1.133-1.856h-.059c-.148.39-.57.742-1.261.742-.91 0-1.72-.613-1.72-1.758 0-1.148.848-1.836 1.973-1.836 1.09 0 2.063.637 2.063 2.688 0 1.867-.723 2.848-2.145 2.848zm.062-2.735c.504 0 .933-.336.933-.972 0-.633-.398-1.008-.94-1.008-.52 0-.927.375-.927 1 0 .64.418.98.934.98z" />
                                <path d="M12.438 8.668V14H11.39V9.684h-.051l-1.211.859v-.969l1.262-.906h1.046zM4.5 2.5a.5.5 0 0 0-1 0v9.793l-1.146-1.147a.5.5 0 0 0-.708.708l2 1.999.007.007a.497.497 0 0 0 .7-.006l2-2a.5.5 0 0 0-.707-.708L4.5 12.293V2.5z" />
                            </svg>
                        }
                    </button>
                </th>
                <th style="vertical-align: middle; width: 15%;">
                    Username
                    <button @onclick="(() => OrderByUsername())" class="btn btn-outline-primary">
                        @if (orderUsername)
                        {
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-sort-alpha-down" viewBox="0 0 16 16">
                                <path fill-rule="evenodd" d="M10.082 5.629 9.664 7H8.598l1.789-5.332h1.234L13.402 7h-1.12l-.419-1.371h-1.781zm1.57-.785L11 2.687h-.047l-.652 2.157h1.351z" />
                                <path d="M12.96 14H9.028v-.691l2.579-3.72v-.054H9.098v-.867h3.785v.691l-2.567 3.72v.054h2.645V14zM4.5 2.5a.5.5 0 0 0-1 0v9.793l-1.146-1.147a.5.5 0 0 0-.708.708l2 1.999.007.007a.497.497 0 0 0 .7-.006l2-2a.5.5 0 0 0-.707-.708L4.5 12.293V2.5z" />
                            </svg>
                        }
                        else
                        {
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-sort-alpha-down-alt" viewBox="0 0 16 16">
                                <path d="M12.96 7H9.028v-.691l2.579-3.72v-.054H9.098v-.867h3.785v.691l-2.567 3.72v.054h2.645V7z" />
                                <path fill-rule="evenodd" d="M10.082 12.629 9.664 14H8.598l1.789-5.332h1.234L13.402 14h-1.12l-.419-1.371h-1.781zm1.57-.785L11 9.688h-.047l-.652 2.156h1.351z" />
                                <path d="M4.5 2.5a.5.5 0 0 0-1 0v9.793l-1.146-1.147a.5.5 0 0 0-.708.708l2 1.999.007.007a.497.497 0 0 0 .7-.006l2-2a.5.5 0 0 0-.707-.708L4.5 12.293V2.5z" />
                            </svg>
                        }
                    </button>
                </th>
                <th style="vertical-align: middle; width: 15%;">Password</th>
                <th style="vertical-align: middle; width: 15%;">
                    Name
                    <button @onclick="(() => OrderByName())" class="btn btn-outline-primary">
                        @if (orderName)
                        {
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-sort-alpha-down" viewBox="0 0 16 16">
                                <path fill-rule="evenodd" d="M10.082 5.629 9.664 7H8.598l1.789-5.332h1.234L13.402 7h-1.12l-.419-1.371h-1.781zm1.57-.785L11 2.687h-.047l-.652 2.157h1.351z" />
                                <path d="M12.96 14H9.028v-.691l2.579-3.72v-.054H9.098v-.867h3.785v.691l-2.567 3.72v.054h2.645V14zM4.5 2.5a.5.5 0 0 0-1 0v9.793l-1.146-1.147a.5.5 0 0 0-.708.708l2 1.999.007.007a.497.497 0 0 0 .7-.006l2-2a.5.5 0 0 0-.707-.708L4.5 12.293V2.5z" />
                            </svg>
                        }
                        else
                        {
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-sort-alpha-down-alt" viewBox="0 0 16 16">
                                <path d="M12.96 7H9.028v-.691l2.579-3.72v-.054H9.098v-.867h3.785v.691l-2.567 3.72v.054h2.645V7z" />
                                <path fill-rule="evenodd" d="M10.082 12.629 9.664 14H8.598l1.789-5.332h1.234L13.402 14h-1.12l-.419-1.371h-1.781zm1.57-.785L11 9.688h-.047l-.652 2.156h1.351z" />
                                <path d="M4.5 2.5a.5.5 0 0 0-1 0v9.793l-1.146-1.147a.5.5 0 0 0-.708.708l2 1.999.007.007a.497.497 0 0 0 .7-.006l2-2a.5.5 0 0 0-.707-.708L4.5 12.293V2.5z" />
                            </svg>
                        }
                    </button>
                </th>
                <th style="vertical-align: middle; width: 15%;">
                    Surname
                    <button @onclick="(() => OrderBySurname())" class="btn btn-outline-primary">
                        @if (orderSurname)
                        {
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-sort-alpha-down" viewBox="0 0 16 16">
                                <path fill-rule="evenodd" d="M10.082 5.629 9.664 7H8.598l1.789-5.332h1.234L13.402 7h-1.12l-.419-1.371h-1.781zm1.57-.785L11 2.687h-.047l-.652 2.157h1.351z" />
                                <path d="M12.96 14H9.028v-.691l2.579-3.72v-.054H9.098v-.867h3.785v.691l-2.567 3.72v.054h2.645V14zM4.5 2.5a.5.5 0 0 0-1 0v9.793l-1.146-1.147a.5.5 0 0 0-.708.708l2 1.999.007.007a.497.497 0 0 0 .7-.006l2-2a.5.5 0 0 0-.707-.708L4.5 12.293V2.5z" />
                            </svg>
                        }
                        else
                        {
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-sort-alpha-down-alt" viewBox="0 0 16 16">
                                <path d="M12.96 7H9.028v-.691l2.579-3.72v-.054H9.098v-.867h3.785v.691l-2.567 3.72v.054h2.645V7z" />
                                <path fill-rule="evenodd" d="M10.082 12.629 9.664 14H8.598l1.789-5.332h1.234L13.402 14h-1.12l-.419-1.371h-1.781zm1.57-.785L11 9.688h-.047l-.652 2.156h1.351z" />
                                <path d="M4.5 2.5a.5.5 0 0 0-1 0v9.793l-1.146-1.147a.5.5 0 0 0-.708.708l2 1.999.007.007a.497.497 0 0 0 .7-.006l2-2a.5.5 0 0 0-.707-.708L4.5 12.293V2.5z" />
                            </svg>
                        }
                    </button>
                </th>
                <th style="vertical-align: middle; width: 15%;">
                    Email
                    <button @onclick="(() => OrderByEmail())" class="btn btn-outline-primary">
                        @if (orderEmail)
                        {
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-sort-alpha-down" viewBox="0 0 16 16">
                                <path fill-rule="evenodd" d="M10.082 5.629 9.664 7H8.598l1.789-5.332h1.234L13.402 7h-1.12l-.419-1.371h-1.781zm1.57-.785L11 2.687h-.047l-.652 2.157h1.351z" />
                                <path d="M12.96 14H9.028v-.691l2.579-3.72v-.054H9.098v-.867h3.785v.691l-2.567 3.72v.054h2.645V14zM4.5 2.5a.5.5 0 0 0-1 0v9.793l-1.146-1.147a.5.5 0 0 0-.708.708l2 1.999.007.007a.497.497 0 0 0 .7-.006l2-2a.5.5 0 0 0-.707-.708L4.5 12.293V2.5z" />
                            </svg>
                        }
                        else
                        {
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-sort-alpha-down-alt" viewBox="0 0 16 16">
                                <path d="M12.96 7H9.028v-.691l2.579-3.72v-.054H9.098v-.867h3.785v.691l-2.567 3.72v.054h2.645V7z" />
                                <path fill-rule="evenodd" d="M10.082 12.629 9.664 14H8.598l1.789-5.332h1.234L13.402 14h-1.12l-.419-1.371h-1.781zm1.57-.785L11 9.688h-.047l-.652 2.156h1.351z" />
                                <path d="M4.5 2.5a.5.5 0 0 0-1 0v9.793l-1.146-1.147a.5.5 0 0 0-.708.708l2 1.999.007.007a.497.497 0 0 0 .7-.006l2-2a.5.5 0 0 0-.707-.708L4.5 12.293V2.5z" />
                            </svg>
                        }
                    </button>
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in userList)
            {

                <tr>
                    <td style="width: 5%; vertical-align: middle;"><button class="btn btn-outline-danger" @onclick="(() => clickedButton(user.Username))">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pen" viewBox="0 0 16 16">
                                <path d="m13.498.795.149-.149a1.207 1.207 0 1 1 1.707 1.708l-.149.148a1.5 1.5 0 0 1-.059 2.059L4.854 14.854a.5.5 0 0 1-.233.131l-4 1a.5.5 0 0 1-.606-.606l1-4a.5.5 0 0 1 .131-.232l9.642-9.642a.5.5 0 0 0-.642.056L6.854 4.854a.5.5 0 1 1-.708-.708L9.44.854A1.5 1.5 0 0 1 11.5.796a1.5 1.5 0 0 1 1.998-.001zm-.644.766a.5.5 0 0 0-.707 0L1.95 11.756l-.764 3.057 3.057-.764L14.44 3.854a.5.5 0 0 0 0-.708l-1.585-1.585z" />
                            </svg>
                            @*Edit*@
                        
                    </button></td>
                    <td style="vertical-align: middle;">@GetRoleNameForUser(user)</td>
                    <td style="vertical-align: middle;">@user.Username</td>
                    <td style="vertical-align: middle;">@user.Password.Replace(user.Password, new string('*', user.Password.Length))</td>
                    <td style="vertical-align: middle;">@user.Name</td>
                    <td style="vertical-align: middle;">@user.Surname</td>
                    <td style="vertical-align: middle;">@user.Email</td>

                </tr>

            }
        </tbody>
    </table>
}




@code {
    string loggedInName = "";
    string loggedInSurname = "";

    private List<User> userList = new List<User>();
    private int pagesize = 10;
    private int pagenum = 1;

    private bool orderRoleId = true;
    private bool orderUsername = true;
    //private bool orderPassword = true;
    private bool orderName = true;
    private bool orderSurname = true;
    private bool orderEmail = true;


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await UserService.GetUsers();
        await RoleService.GetRoles();
        foreach (var user in UserService.Users)
        {
            user.Role = RoleService.Roles.SingleOrDefault(r => r.RoleId == user.RoleId, new Role() { RoleId = 100, RoleName = "Error" });
        }
        //username = await LocalStorage.GetStringAsync("user");
        //username = null;

        loggedInName = await LocalStorage.GetStringAsync("loggedInName");
        loggedInSurname = await LocalStorage.GetStringAsync("loggedInSurname");

        userList = PaginationService.GetUsersPage(UserService.Users, pagesize, pagenum);
        //authService.SetCurrentRoleName("administrator");
    }


    protected async void clickedButton(string username)
    {
        //var role1 = new Role() { RoleName = "Blabla"};
        //await RoleService.CreateRole(role1);
        //role1 = await RoleService.GetRoleWithName(role1.RoleName);
        //Console.WriteLine("Button clicked");
        //role1.RoleName = "Blabla2";
        //await RoleService.UpdateRole(role1);
        //await LocalStorage.SaveStringAsync("key", "value");
        //Console.WriteLine(await LocalStorage.GetStringAsync("key"));
        NavigationManager.NavigateTo($"/edituser/{username}");
        //await RoleService.CreateRole(new Role() { RoleId = 4, RoleName = new string("Blabla") });
        //await RoleService.GetRoles();
    }
    protected async void createUser()
    {
        NavigationManager.NavigateTo("/createuser");
    }

    private string GetRoleNameForUser(User u)
    {
        u.Role = RoleService.Roles.SingleOrDefault(r => r.RoleId == u.RoleId, new Role() { RoleId = 100, RoleName = "Error" });
        return u.Role.RoleName;
    }

    private void NextPage()
    {
        if (pagenum >= MaxPages())
        {
            return;
        }
        else
        {
            ++pagenum;
            userList = PaginationService.GetUsersPage(UserService.Users, pagesize, pagenum);
        }
    }

    private void PrevPage()
    {
        if (pagenum <= 1)
        {
            return;
        }
        else
        {
            --pagenum;
            userList = PaginationService.GetUsersPage(UserService.Users, pagesize, pagenum);
        }
    }

    private int MaxPages()
    {
        if (UserService.Users.Count == (UserService.Users.Count / pagesize) * pagesize) return UserService.Users.Count / pagesize;
        else return UserService.Users.Count / pagesize + 1;
    }


    private void OrderByRoleId()
    {
        orderRoleId = !orderRoleId;
        var recordsToSort = UserService.Users.AsQueryable();
        if (orderRoleId)
        {
            recordsToSort = recordsToSort.OrderBy(u => u.RoleId);
        }
        else
        {
            recordsToSort = recordsToSort.OrderByDescending(u => u.RoleId);
        }
        userList = PaginationService.GetUsersPage(recordsToSort.ToList(), pagesize, pagenum);
        UserService.Users = recordsToSort.ToList();
        StateHasChanged();
    }

    private void OrderByUsername()
    {
        orderUsername = !orderUsername;
        var recordsToSort = UserService.Users.AsQueryable();
        if (orderUsername)
        {
            recordsToSort = recordsToSort.OrderBy(u => u.Username);
        }
        else
        {
            recordsToSort = recordsToSort.OrderByDescending(u => u.Username);
        }
        userList = PaginationService.GetUsersPage(recordsToSort.ToList(), pagesize, pagenum);
        UserService.Users = recordsToSort.ToList();
        StateHasChanged();
    }

    private void OrderByName()
    {
        orderName = !orderName;
        var recordsToSort = UserService.Users.AsQueryable();
        if (orderName)
        {
            recordsToSort = recordsToSort.OrderBy(u => u.Name);
        }
        else
        {
            recordsToSort = recordsToSort.OrderByDescending(u => u.Name);
        }
        userList = PaginationService.GetUsersPage(recordsToSort.ToList(), pagesize, pagenum);
        UserService.Users = recordsToSort.ToList();
        StateHasChanged();
    }

    private void OrderBySurname()
    {
        orderSurname = !orderSurname;
        var recordsToSort = UserService.Users.AsQueryable();
        if (orderSurname)
        {
            recordsToSort = recordsToSort.OrderBy(u => u.Surname);
        }
        else
        {
            recordsToSort = recordsToSort.OrderByDescending(u => u.Surname);
        }
        userList = PaginationService.GetUsersPage(recordsToSort.ToList(), pagesize, pagenum);
        UserService.Users = recordsToSort.ToList();
        StateHasChanged();
    }

    private void OrderByEmail()
    {
        orderEmail = !orderEmail;
        var recordsToSort = UserService.Users.AsQueryable();
        if (orderEmail)
        {
            recordsToSort = recordsToSort.OrderBy(u => u.Email);
        }
        else
        {
            recordsToSort = recordsToSort.OrderByDescending(u => u.Email);
        }
        userList = PaginationService.GetUsersPage(recordsToSort.ToList(), pagesize, pagenum);
        UserService.Users = recordsToSort.ToList();
        StateHasChanged();
    }


}
