@page "/projects"

@inject ILocalStorage LocalStorage
@inject AuthService authService
@inject IUserService UserService
@inject IProjectService ProjectService
@inject IProjectTaskService ProjectTaskService
@inject IRoleService RoleService
@inject IPaginationService PaginationService
@inject NavigationManager NavigationManager


@if (authService.CurrentRoleName == "administrator" || authService.CurrentRoleName == "projectmanager")
{
    <table class="table" style="width: 90%">
        <thead>
            <tr>
                <th style="width: 8%"><h2>Projects</h2></th>
                @if (authService.CurrentRoleName == "administrator" || authService.CurrentRoleName == "projectmanager")
                {
                    <th>
                        <h3>
                            <button class="btn btn-success" @onclick="(() => createProject())">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus" viewBox="0 0 16 16">
                                    <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
                                </svg>

                                Create a new Project
                            </button>
                         </h3>
                    </th>
                }
            </tr>
        </thead>
    </table>


    <nav aria-label="Page navigation example" style="width: 90%">
        <ul class="pagination justify-content-center">
            @if (pagenum <= 1)
            {
                <li class="page-item disabled">
                    <button disabled @onclick="(() => PrevPage())" class="page-link" aria-label="Previous">
                        <span aria-hidden="true">&laquo;</span>
                        <span class="sr-only">Previous</span>
                    </button>
                </li>
            }
            else
            {
                <li class="page-item ">
                    <button @onclick="(() => PrevPage())" class="page-link" aria-label="Previous">
                        <span aria-hidden="true">&laquo;</span>
                        <span class="sr-only">Previous</span>
                    </button>
                </li>
            }
            <li class="page-item"><a class="page-link">@pagenum / @MaxPages()</a></li>

            @if (pagenum >= MaxPages())
            {
                <li class="page-item disabled">
                    <button disabled @onclick="(() => NextPage())" class="page-link" aria-label="Next">
                        <span class="sr-only">Next</span>
                        <span aria-hidden="true">&raquo;</span>

                    </button>
                </li>
            }
            else
            {
                <li class="page-item ">
                    <button @onclick="(() => NextPage())" class="page-link" aria-label="Next">
                        <span class="sr-only">Next</span>
                        <span aria-hidden="true">&raquo;</span>

                    </button>
                </li>
            }

        </ul>
    </nav>

   
    <table class="table table-bordered table-hover" style="width: 90%">
        <thead>
            <tr>
                <th style="vertical-align: middle;"></th>
                <th style="vertical-align: middle;">

                    Project Code
                    <button @onclick="(() => OrderByProjectCode())" class="btn btn-outline-primary">
                        @if (orderProjectCode)
                        {
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-sort-alpha-down" viewBox="0 0 16 16">
                                <path fill-rule="evenodd" d="M10.082 5.629 9.664 7H8.598l1.789-5.332h1.234L13.402 7h-1.12l-.419-1.371h-1.781zm1.57-.785L11 2.687h-.047l-.652 2.157h1.351z" />
                                <path d="M12.96 14H9.028v-.691l2.579-3.72v-.054H9.098v-.867h3.785v.691l-2.567 3.72v.054h2.645V14zM4.5 2.5a.5.5 0 0 0-1 0v9.793l-1.146-1.147a.5.5 0 0 0-.708.708l2 1.999.007.007a.497.497 0 0 0 .7-.006l2-2a.5.5 0 0 0-.707-.708L4.5 12.293V2.5z" />
                            </svg>
                        }
                        else
                        {
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-sort-alpha-down-alt" viewBox="0 0 16 16">
                                <path d="M12.96 7H9.028v-.691l2.579-3.72v-.054H9.098v-.867h3.785v.691l-2.567 3.72v.054h2.645V7z" />
                                <path fill-rule="evenodd" d="M10.082 12.629 9.664 14H8.598l1.789-5.332h1.234L13.402 14h-1.12l-.419-1.371h-1.781zm1.57-.785L11 9.688h-.047l-.652 2.156h1.351z" />
                                <path d="M4.5 2.5a.5.5 0 0 0-1 0v9.793l-1.146-1.147a.5.5 0 0 0-.708.708l2 1.999.007.007a.497.497 0 0 0 .7-.006l2-2a.5.5 0 0 0-.707-.708L4.5 12.293V2.5z" />
                            </svg>
                        }
                    </button>
                    
                </th>
                <th style="vertical-align: middle;">
                    Project Name
                    <button @onclick="(() => OrderByProjectName())" class="btn btn-outline-primary">
                        @if (orderProjectName)
                        {
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-sort-alpha-down" viewBox="0 0 16 16">
                                <path fill-rule="evenodd" d="M10.082 5.629 9.664 7H8.598l1.789-5.332h1.234L13.402 7h-1.12l-.419-1.371h-1.781zm1.57-.785L11 2.687h-.047l-.652 2.157h1.351z" />
                                <path d="M12.96 14H9.028v-.691l2.579-3.72v-.054H9.098v-.867h3.785v.691l-2.567 3.72v.054h2.645V14zM4.5 2.5a.5.5 0 0 0-1 0v9.793l-1.146-1.147a.5.5 0 0 0-.708.708l2 1.999.007.007a.497.497 0 0 0 .7-.006l2-2a.5.5 0 0 0-.707-.708L4.5 12.293V2.5z" />
                            </svg>
                        }
                        else
                        {
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-sort-alpha-down-alt" viewBox="0 0 16 16">
                                <path d="M12.96 7H9.028v-.691l2.579-3.72v-.054H9.098v-.867h3.785v.691l-2.567 3.72v.054h2.645V7z" />
                                <path fill-rule="evenodd" d="M10.082 12.629 9.664 14H8.598l1.789-5.332h1.234L13.402 14h-1.12l-.419-1.371h-1.781zm1.57-.785L11 9.688h-.047l-.652 2.156h1.351z" />
                                <path d="M4.5 2.5a.5.5 0 0 0-1 0v9.793l-1.146-1.147a.5.5 0 0 0-.708.708l2 1.999.007.007a.497.497 0 0 0 .7-.006l2-2a.5.5 0 0 0-.707-.708L4.5 12.293V2.5z" />
                            </svg>
                        }
                    </button>
                    
                    </th>
                <th style="vertical-align: middle; ">
                    Project Manager
                    <button @onclick="(() => OrderByProjectManager())" class="btn btn-outline-primary">
                        @if (orderProjectManagerUsername)
                        {
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-sort-alpha-down" viewBox="0 0 16 16">
                                <path fill-rule="evenodd" d="M10.082 5.629 9.664 7H8.598l1.789-5.332h1.234L13.402 7h-1.12l-.419-1.371h-1.781zm1.57-.785L11 2.687h-.047l-.652 2.157h1.351z" />
                                <path d="M12.96 14H9.028v-.691l2.579-3.72v-.054H9.098v-.867h3.785v.691l-2.567 3.72v.054h2.645V14zM4.5 2.5a.5.5 0 0 0-1 0v9.793l-1.146-1.147a.5.5 0 0 0-.708.708l2 1.999.007.007a.497.497 0 0 0 .7-.006l2-2a.5.5 0 0 0-.707-.708L4.5 12.293V2.5z" />
                            </svg>
                        }
                        else
                        {
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-sort-alpha-down-alt" viewBox="0 0 16 16">
                                <path d="M12.96 7H9.028v-.691l2.579-3.72v-.054H9.098v-.867h3.785v.691l-2.567 3.72v.054h2.645V7z" />
                                <path fill-rule="evenodd" d="M10.082 12.629 9.664 14H8.598l1.789-5.332h1.234L13.402 14h-1.12l-.419-1.371h-1.781zm1.57-.785L11 9.688h-.047l-.652 2.156h1.351z" />
                                <path d="M4.5 2.5a.5.5 0 0 0-1 0v9.793l-1.146-1.147a.5.5 0 0 0-.708.708l2 1.999.007.007a.497.497 0 0 0 .7-.006l2-2a.5.5 0 0 0-.707-.708L4.5 12.293V2.5z" />
                            </svg>
                        }
                    </button>
                </th>
                @if (authService.CurrentRoleName == "administrator")
                {
                    @if (false)
                    {
                        <th style="vertical-align: middle; width: 12%"></th>
                    }
                }
                else if (authService.CurrentRoleName == "projectmanager")
                {
                    <th style="vertical-align: middle; width: 10%">
                        Progress
                        <button @onclick="(() => OrderByProgress())" class="btn btn-outline-primary">
                            @if (orderProjectProgress)
                            {
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-sort-numeric-down" viewBox="0 0 16 16">
                                    <path d="M12.438 1.668V7H11.39V2.684h-.051l-1.211.859v-.969l1.262-.906h1.046z" />
                                    <path fill-rule="evenodd" d="M11.36 14.098c-1.137 0-1.708-.657-1.762-1.278h1.004c.058.223.343.45.773.45.824 0 1.164-.829 1.133-1.856h-.059c-.148.39-.57.742-1.261.742-.91 0-1.72-.613-1.72-1.758 0-1.148.848-1.835 1.973-1.835 1.09 0 2.063.636 2.063 2.687 0 1.867-.723 2.848-2.145 2.848zm.062-2.735c.504 0 .933-.336.933-.972 0-.633-.398-1.008-.94-1.008-.52 0-.927.375-.927 1 0 .64.418.98.934.98z" />
                                    <path d="M4.5 2.5a.5.5 0 0 0-1 0v9.793l-1.146-1.147a.5.5 0 0 0-.708.708l2 1.999.007.007a.497.497 0 0 0 .7-.006l2-2a.5.5 0 0 0-.707-.708L4.5 12.293V2.5z" />
                                </svg>
                            }
                            else
                            {
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-sort-numeric-down-alt" viewBox="0 0 16 16">
                                    <path fill-rule="evenodd" d="M11.36 7.098c-1.137 0-1.708-.657-1.762-1.278h1.004c.058.223.343.45.773.45.824 0 1.164-.829 1.133-1.856h-.059c-.148.39-.57.742-1.261.742-.91 0-1.72-.613-1.72-1.758 0-1.148.848-1.836 1.973-1.836 1.09 0 2.063.637 2.063 2.688 0 1.867-.723 2.848-2.145 2.848zm.062-2.735c.504 0 .933-.336.933-.972 0-.633-.398-1.008-.94-1.008-.52 0-.927.375-.927 1 0 .64.418.98.934.98z" />
                                    <path d="M12.438 8.668V14H11.39V9.684h-.051l-1.211.859v-.969l1.262-.906h1.046zM4.5 2.5a.5.5 0 0 0-1 0v9.793l-1.146-1.147a.5.5 0 0 0-.708.708l2 1.999.007.007a.497.497 0 0 0 .7-.006l2-2a.5.5 0 0 0-.707-.708L4.5 12.293V2.5z" />
                                </svg>
                            }
                        </button>
                    </th>
                    <th style="vertical-align: middle; width: 11%">
                        Tasks: Total
                        <button @onclick="(() => OrderByProjectTasksTotal())" class="btn btn-outline-primary">
                            @if (orderProjectTasksTotal)
                            {
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-sort-numeric-down" viewBox="0 0 16 16">
                                    <path d="M12.438 1.668V7H11.39V2.684h-.051l-1.211.859v-.969l1.262-.906h1.046z" />
                                    <path fill-rule="evenodd" d="M11.36 14.098c-1.137 0-1.708-.657-1.762-1.278h1.004c.058.223.343.45.773.45.824 0 1.164-.829 1.133-1.856h-.059c-.148.39-.57.742-1.261.742-.91 0-1.72-.613-1.72-1.758 0-1.148.848-1.835 1.973-1.835 1.09 0 2.063.636 2.063 2.687 0 1.867-.723 2.848-2.145 2.848zm.062-2.735c.504 0 .933-.336.933-.972 0-.633-.398-1.008-.94-1.008-.52 0-.927.375-.927 1 0 .64.418.98.934.98z" />
                                    <path d="M4.5 2.5a.5.5 0 0 0-1 0v9.793l-1.146-1.147a.5.5 0 0 0-.708.708l2 1.999.007.007a.497.497 0 0 0 .7-.006l2-2a.5.5 0 0 0-.707-.708L4.5 12.293V2.5z" />
                                </svg>
                            }
                            else
                            {
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-sort-numeric-down-alt" viewBox="0 0 16 16">
                                    <path fill-rule="evenodd" d="M11.36 7.098c-1.137 0-1.708-.657-1.762-1.278h1.004c.058.223.343.45.773.45.824 0 1.164-.829 1.133-1.856h-.059c-.148.39-.57.742-1.261.742-.91 0-1.72-.613-1.72-1.758 0-1.148.848-1.836 1.973-1.836 1.09 0 2.063.637 2.063 2.688 0 1.867-.723 2.848-2.145 2.848zm.062-2.735c.504 0 .933-.336.933-.972 0-.633-.398-1.008-.94-1.008-.52 0-.927.375-.927 1 0 .64.418.98.934.98z" />
                                    <path d="M12.438 8.668V14H11.39V9.684h-.051l-1.211.859v-.969l1.262-.906h1.046zM4.5 2.5a.5.5 0 0 0-1 0v9.793l-1.146-1.147a.5.5 0 0 0-.708.708l2 1.999.007.007a.497.497 0 0 0 .7-.006l2-2a.5.5 0 0 0-.707-.708L4.5 12.293V2.5z" />
                                </svg>
                            }
                        </button>
                    </th>
                    <th style="vertical-align: middle; width: 8%">
                        New
                        <button @onclick="(() => OrderByProjectTasksNew())" class="btn btn-outline-primary">
                            @if (orderProjectTasksNew)
                            {
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-sort-numeric-down" viewBox="0 0 16 16">
                                    <path d="M12.438 1.668V7H11.39V2.684h-.051l-1.211.859v-.969l1.262-.906h1.046z" />
                                    <path fill-rule="evenodd" d="M11.36 14.098c-1.137 0-1.708-.657-1.762-1.278h1.004c.058.223.343.45.773.45.824 0 1.164-.829 1.133-1.856h-.059c-.148.39-.57.742-1.261.742-.91 0-1.72-.613-1.72-1.758 0-1.148.848-1.835 1.973-1.835 1.09 0 2.063.636 2.063 2.687 0 1.867-.723 2.848-2.145 2.848zm.062-2.735c.504 0 .933-.336.933-.972 0-.633-.398-1.008-.94-1.008-.52 0-.927.375-.927 1 0 .64.418.98.934.98z" />
                                    <path d="M4.5 2.5a.5.5 0 0 0-1 0v9.793l-1.146-1.147a.5.5 0 0 0-.708.708l2 1.999.007.007a.497.497 0 0 0 .7-.006l2-2a.5.5 0 0 0-.707-.708L4.5 12.293V2.5z" />
                                </svg>
                            }
                            else
                            {
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-sort-numeric-down-alt" viewBox="0 0 16 16">
                                    <path fill-rule="evenodd" d="M11.36 7.098c-1.137 0-1.708-.657-1.762-1.278h1.004c.058.223.343.45.773.45.824 0 1.164-.829 1.133-1.856h-.059c-.148.39-.57.742-1.261.742-.91 0-1.72-.613-1.72-1.758 0-1.148.848-1.836 1.973-1.836 1.09 0 2.063.637 2.063 2.688 0 1.867-.723 2.848-2.145 2.848zm.062-2.735c.504 0 .933-.336.933-.972 0-.633-.398-1.008-.94-1.008-.52 0-.927.375-.927 1 0 .64.418.98.934.98z" />
                                    <path d="M12.438 8.668V14H11.39V9.684h-.051l-1.211.859v-.969l1.262-.906h1.046zM4.5 2.5a.5.5 0 0 0-1 0v9.793l-1.146-1.147a.5.5 0 0 0-.708.708l2 1.999.007.007a.497.497 0 0 0 .7-.006l2-2a.5.5 0 0 0-.707-.708L4.5 12.293V2.5z" />
                                </svg>
                            }
                        </button>
                    </th>
                    <th style="vertical-align: middle; width: 11%">
                        In Progress
                        <button @onclick="(() => OrderByProjectTasksInProgress())" class="btn btn-outline-primary">
                            @if (orderProjectTasksInProgress)
                            {
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-sort-numeric-down" viewBox="0 0 16 16">
                                    <path d="M12.438 1.668V7H11.39V2.684h-.051l-1.211.859v-.969l1.262-.906h1.046z" />
                                    <path fill-rule="evenodd" d="M11.36 14.098c-1.137 0-1.708-.657-1.762-1.278h1.004c.058.223.343.45.773.45.824 0 1.164-.829 1.133-1.856h-.059c-.148.39-.57.742-1.261.742-.91 0-1.72-.613-1.72-1.758 0-1.148.848-1.835 1.973-1.835 1.09 0 2.063.636 2.063 2.687 0 1.867-.723 2.848-2.145 2.848zm.062-2.735c.504 0 .933-.336.933-.972 0-.633-.398-1.008-.94-1.008-.52 0-.927.375-.927 1 0 .64.418.98.934.98z" />
                                    <path d="M4.5 2.5a.5.5 0 0 0-1 0v9.793l-1.146-1.147a.5.5 0 0 0-.708.708l2 1.999.007.007a.497.497 0 0 0 .7-.006l2-2a.5.5 0 0 0-.707-.708L4.5 12.293V2.5z" />
                                </svg>
                            }
                            else
                            {
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-sort-numeric-down-alt" viewBox="0 0 16 16">
                                    <path fill-rule="evenodd" d="M11.36 7.098c-1.137 0-1.708-.657-1.762-1.278h1.004c.058.223.343.45.773.45.824 0 1.164-.829 1.133-1.856h-.059c-.148.39-.57.742-1.261.742-.91 0-1.72-.613-1.72-1.758 0-1.148.848-1.836 1.973-1.836 1.09 0 2.063.637 2.063 2.688 0 1.867-.723 2.848-2.145 2.848zm.062-2.735c.504 0 .933-.336.933-.972 0-.633-.398-1.008-.94-1.008-.52 0-.927.375-.927 1 0 .64.418.98.934.98z" />
                                    <path d="M12.438 8.668V14H11.39V9.684h-.051l-1.211.859v-.969l1.262-.906h1.046zM4.5 2.5a.5.5 0 0 0-1 0v9.793l-1.146-1.147a.5.5 0 0 0-.708.708l2 1.999.007.007a.497.497 0 0 0 .7-.006l2-2a.5.5 0 0 0-.707-.708L4.5 12.293V2.5z" />
                                </svg>
                            }
                        </button>
                        </th>
                    <th style="vertical-align: middle; width: 10%">
                        Finished
                        <button @onclick="(() => OrderByProjectTasksFinished())" class="btn btn-outline-primary">
                            @if (orderProjectTasksFinished)
                            {
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-sort-numeric-down" viewBox="0 0 16 16">
                                    <path d="M12.438 1.668V7H11.39V2.684h-.051l-1.211.859v-.969l1.262-.906h1.046z" />
                                    <path fill-rule="evenodd" d="M11.36 14.098c-1.137 0-1.708-.657-1.762-1.278h1.004c.058.223.343.45.773.45.824 0 1.164-.829 1.133-1.856h-.059c-.148.39-.57.742-1.261.742-.91 0-1.72-.613-1.72-1.758 0-1.148.848-1.835 1.973-1.835 1.09 0 2.063.636 2.063 2.687 0 1.867-.723 2.848-2.145 2.848zm.062-2.735c.504 0 .933-.336.933-.972 0-.633-.398-1.008-.94-1.008-.52 0-.927.375-.927 1 0 .64.418.98.934.98z" />
                                    <path d="M4.5 2.5a.5.5 0 0 0-1 0v9.793l-1.146-1.147a.5.5 0 0 0-.708.708l2 1.999.007.007a.497.497 0 0 0 .7-.006l2-2a.5.5 0 0 0-.707-.708L4.5 12.293V2.5z" />
                                </svg>
                            }
                            else
                            {
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-sort-numeric-down-alt" viewBox="0 0 16 16">
                                    <path fill-rule="evenodd" d="M11.36 7.098c-1.137 0-1.708-.657-1.762-1.278h1.004c.058.223.343.45.773.45.824 0 1.164-.829 1.133-1.856h-.059c-.148.39-.57.742-1.261.742-.91 0-1.72-.613-1.72-1.758 0-1.148.848-1.836 1.973-1.836 1.09 0 2.063.637 2.063 2.688 0 1.867-.723 2.848-2.145 2.848zm.062-2.735c.504 0 .933-.336.933-.972 0-.633-.398-1.008-.94-1.008-.52 0-.927.375-.927 1 0 .64.418.98.934.98z" />
                                    <path d="M12.438 8.668V14H11.39V9.684h-.051l-1.211.859v-.969l1.262-.906h1.046zM4.5 2.5a.5.5 0 0 0-1 0v9.793l-1.146-1.147a.5.5 0 0 0-.708.708l2 1.999.007.007a.497.497 0 0 0 .7-.006l2-2a.5.5 0 0 0-.707-.708L4.5 12.293V2.5z" />
                                </svg>
                            }
                        </button>
                        
                    </th>
                    <th style="vertical-align: middle; width: 10%">
                        Overdue
                        <button @onclick="(() => OrderByProjectTasksOverdue())" class="btn btn-outline-primary">
                            @if (orderProjectTasksOverdue)
                            {
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-sort-numeric-down" viewBox="0 0 16 16">
                                    <path d="M12.438 1.668V7H11.39V2.684h-.051l-1.211.859v-.969l1.262-.906h1.046z" />
                                    <path fill-rule="evenodd" d="M11.36 14.098c-1.137 0-1.708-.657-1.762-1.278h1.004c.058.223.343.45.773.45.824 0 1.164-.829 1.133-1.856h-.059c-.148.39-.57.742-1.261.742-.91 0-1.72-.613-1.72-1.758 0-1.148.848-1.835 1.973-1.835 1.09 0 2.063.636 2.063 2.687 0 1.867-.723 2.848-2.145 2.848zm.062-2.735c.504 0 .933-.336.933-.972 0-.633-.398-1.008-.94-1.008-.52 0-.927.375-.927 1 0 .64.418.98.934.98z" />
                                    <path d="M4.5 2.5a.5.5 0 0 0-1 0v9.793l-1.146-1.147a.5.5 0 0 0-.708.708l2 1.999.007.007a.497.497 0 0 0 .7-.006l2-2a.5.5 0 0 0-.707-.708L4.5 12.293V2.5z" />
                                </svg>
                            }
                            else
                            {
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-sort-numeric-down-alt" viewBox="0 0 16 16">
                                    <path fill-rule="evenodd" d="M11.36 7.098c-1.137 0-1.708-.657-1.762-1.278h1.004c.058.223.343.45.773.45.824 0 1.164-.829 1.133-1.856h-.059c-.148.39-.57.742-1.261.742-.91 0-1.72-.613-1.72-1.758 0-1.148.848-1.836 1.973-1.836 1.09 0 2.063.637 2.063 2.688 0 1.867-.723 2.848-2.145 2.848zm.062-2.735c.504 0 .933-.336.933-.972 0-.633-.398-1.008-.94-1.008-.52 0-.927.375-.927 1 0 .64.418.98.934.98z" />
                                    <path d="M12.438 8.668V14H11.39V9.684h-.051l-1.211.859v-.969l1.262-.906h1.046zM4.5 2.5a.5.5 0 0 0-1 0v9.793l-1.146-1.147a.5.5 0 0 0-.708.708l2 1.999.007.007a.497.497 0 0 0 .7-.006l2-2a.5.5 0 0 0-.707-.708L4.5 12.293V2.5z" />
                                </svg>
                            }
                        </button>
                        
                    </th>
                    @if (false)
                    {
                        <th style="vertical-align: middle; width: 12%"></th>
                    }
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var proj in projectList)
            {
                if (authService.CurrentRoleName == "administrator" || (authService.CurrentRoleName == "projectmanager" && proj.ProjectManagerUsername == loggedIn))
                {
                    <tr>
                        @if(authService.CurrentRoleName == "administrator")
                        {
                            <td style="width: 5%; vertical-align: middle;"><button class="btn btn-outline-danger" @onclick="(() => clickedButton(proj.ProjectCode))">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pen" viewBox="0 0 16 16">
                                        <path d="m13.498.795.149-.149a1.207 1.207 0 1 1 1.707 1.708l-.149.148a1.5 1.5 0 0 1-.059 2.059L4.854 14.854a.5.5 0 0 1-.233.131l-4 1a.5.5 0 0 1-.606-.606l1-4a.5.5 0 0 1 .131-.232l9.642-9.642a.5.5 0 0 0-.642.056L6.854 4.854a.5.5 0 1 1-.708-.708L9.44.854A1.5 1.5 0 0 1 11.5.796a1.5 1.5 0 0 1 1.998-.001zm-.644.766a.5.5 0 0 0-.707 0L1.95 11.756l-.764 3.057 3.057-.764L14.44 3.854a.5.5 0 0 0 0-.708l-1.585-1.585z" />
                                    </svg>
                                    @*Edit*@
                            </button></td>
                        }
                        else if (authService.CurrentRoleName == "projectmanager")
                        {
                            <td></td>    
                        }

                        <td style="vertical-align: middle;">@proj.ProjectCode</td>
                        <td style="vertical-align: middle;">@proj.ProjectName</td>
                        <td style="vertical-align: middle;">@NameOfUser(proj)</td>

                        @if (authService.CurrentRoleName == "administrator")
                        {
                            @if (false)
                            {
                                <td style="width: 5%; vertical-align: middle;"><button class="btn btn-primary" @onclick="(() => openTasks(proj.ProjectCode))" style="color: white">Open Tasks</button></td>
                            }
                        }
                        else if (authService.CurrentRoleName == "projectmanager")
                        {

                            <td style="vertical-align: middle;">@Math.Round(ProgressOfProject(proj), 2)%</td>
                            <td style="vertical-align: middle;">@NumOfTasksTotal(proj)</td>
                            <td style="vertical-align: middle;">@NumOfTasksNew(proj)</td>
                            <td style="vertical-align: middle;">@NumOfTasksInProgress(proj)</td>
                            <td style="vertical-align: middle;">@NumOfTasksFinished(proj)</td>
                            <td style="vertical-align: middle;">@NumOfTasksOverdue(proj)</td>
                            @if (false)
                            {
                                <td style="width: 5%; vertical-align: middle;"><button class="btn btn-primary" @onclick="(() => openTasks(proj.ProjectCode))" style="color: white">Open Tasks</button></td>

                            }
                        }
                    </tr>
                }

            }
        </tbody>
    </table>
}


@code {
    string loggedIn = "";
    string loggedInName = "";
    string loggedInSurname = "";
    string currentRole = "";

    private List<Project> projectList = new List<Project>();
    private int pagesize = 10;
    private int pagenum = 1;

    private bool orderProjectCode = true;
    private bool orderProjectName = true;
    private bool orderProjectManagerUsername = true;
    private bool orderProjectProgress = true;
    private bool orderProjectTasksTotal = true;
    private bool orderProjectTasksNew = true;
    private bool orderProjectTasksInProgress = true;
    private bool orderProjectTasksFinished = true;
    private bool orderProjectTasksOverdue = true;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await ProjectService.GetProjects();
        await ProjectTaskService.GetProjectTasks();
        //Console.WriteLine(ProjectService.Projects.First().ProjectCode);
        await UserService.GetUsers();
        foreach (var proj in ProjectService.Projects)
        {
            proj.ProjectManager = UserService.Users.SingleOrDefault(u => u.Username == proj.ProjectManagerUsername, new User() { Username = "Error"});
        }
        //username = await LocalStorage.GetStringAsync("user");
        //username = null;
        currentRole = authService.CurrentRoleName;
        authService.SetCurrentRoleName(await LocalStorage.GetStringAsync("loggedInRoleName"));
        loggedIn = await LocalStorage.GetStringAsync("loggedIn");
        loggedInName = await LocalStorage.GetStringAsync("loggedInName");
        loggedInSurname = await LocalStorage.GetStringAsync("loggedInSurname");
        projectList = PaginationService.GetProjectsPage(ProjectService.Projects, pagesize, pagenum);
        //authService.SetCurrentRoleName("administrator");
    }


    protected async void clickedButton(string projcode)
    {
        //var role1 = new Role() { RoleName = "Blabla"};
        //await RoleService.CreateRole(role1);
        //role1 = await RoleService.GetRoleWithName(role1.RoleName);
        
        //Console.WriteLine("Button clicked");
        
        //role1.RoleName = "Blabla2";
        //await RoleService.UpdateRole(role1);
        //await LocalStorage.SaveStringAsync("key", "value");
        //Console.WriteLine(await LocalStorage.GetStringAsync("key"));
        NavigationManager.NavigateTo($"/editproject/{projcode}");
        //await RoleService.CreateRole(new Role() { RoleId = 4, RoleName = new string("Blabla") });
        //await RoleService.GetRoles();
    }

    protected async void openTasks(string projcode)
    {
        //var role1 = new Role() { RoleName = "Blabla"};
        //await RoleService.CreateRole(role1);
        //role1 = await RoleService.GetRoleWithName(role1.RoleName);

        //Console.WriteLine("Button clicked");

        //role1.RoleName = "Blabla2";
        //await RoleService.UpdateRole(role1);
        //await LocalStorage.SaveStringAsync("key", "value");
        //Console.WriteLine(await LocalStorage.GetStringAsync("key"));

        //NavigationManager.NavigateTo($"/tasks/{projcode}");

        //await RoleService.CreateRole(new Role() { RoleId = 4, RoleName = new string("Blabla") });
        //await RoleService.GetRoles();
    }
    protected async void createProject()
    {
        NavigationManager.NavigateTo("/createproject");
    }

    private string NameOfUser(Project p)
    {
        p.ProjectManager = UserService.Users.SingleOrDefault(u => u.Username == p.ProjectManagerUsername, new User() { Username = "Error", Name = "Error", Surname = "Error" });
        return p.ProjectManager.Name + " " + p.ProjectManager.Surname + "  [" + p.ProjectManager.Username + "]";
    }

    private double ProgressOfProject(Project p)
    {
        List<ProjectTask> list = ProjectTaskService.ProjectTasks.Where(t => t.ParentProjectProjectCode == p.ProjectCode).ToList();
        int num = list.Count;
        if (num == 0) return 0;
        double sum = 0.0;
        foreach(var t in list)
        {
            sum += t.Progress;
        }
        sum /= num;
        return sum;
    }

    private double NumOfTasksTotal(Project p)
    {
        List<ProjectTask> list = ProjectTaskService.ProjectTasks.Where(t => t.ParentProjectProjectCode == p.ProjectCode).ToList();
        return list.Count;
    }

    private double NumOfTasksNew(Project p)
    {
        List<ProjectTask> list = ProjectTaskService.ProjectTasks.Where(t => t.ParentProjectProjectCode == p.ProjectCode && t.Status == 0).ToList();
        return list.Count;
    }

    private double NumOfTasksInProgress(Project p)
    {
        List<ProjectTask> list = ProjectTaskService.ProjectTasks.Where(t => t.ParentProjectProjectCode == p.ProjectCode && t.Status == 1).ToList();
        return list.Count;
    }

    private double NumOfTasksFinished(Project p)
    {
        List<ProjectTask> list = ProjectTaskService.ProjectTasks.Where(t => t.ParentProjectProjectCode == p.ProjectCode && t.Status == 2).ToList();
        return list.Count;
    }

    private double NumOfTasksOverdue(Project p)
    {
        List<ProjectTask> list = ProjectTaskService.ProjectTasks.Where(t => t.ParentProjectProjectCode == p.ProjectCode && t.Deadline.CompareTo(DateTime.Today.AddDays(2)) <= 0).ToList();
        return list.Count;
    }

    private void NextPage()
    {
        if (pagenum >= MaxPages())
        {
            return;
        }
        else
        {
            ++pagenum;
            projectList = PaginationService.GetProjectsPage(ProjectService.Projects, pagesize, pagenum);
        }
    }

    private void PrevPage()
    {
        if (pagenum <= 1)
        {
            return;
        }
        else
        {
            --pagenum;
            projectList = PaginationService.GetProjectsPage(ProjectService.Projects, pagesize, pagenum);
        }
    }

    private int MaxPages()
    {
        if (authService.CurrentRoleName == "administrator")
        {
            if (ProjectService.Projects.Count == (ProjectService.Projects.Count / pagesize) * pagesize) return ProjectService.Projects.Count / pagesize;
            else return ProjectService.Projects.Count / pagesize + 1;
        }
        else if (authService.CurrentRoleName == "projectmanager")
        {
            int cnt = ProjectService.Projects.Where(p => p.ProjectManagerUsername == loggedIn).ToList().Count;
            if (cnt == (cnt / pagesize) * pagesize) return cnt / pagesize;
            else return cnt / pagesize + 1;
        }
        else return 100;
    }

    //private void OrderByProjectCode()
    //{
    //    orderProjectCode = !orderProjectCode;
    //    var recordsToSort = ProjectService.Projects.AsQueryable();
    //    IOrderedQueryable<Project> ret;
    //    if (orderProjectCode)
    //    {
    //        ret = recordsToSort.OrderBy(p => p.ProjectCode);
    //    }
    //    else
    //    {
    //        ret = recordsToSort.OrderByDescending(p => p.ProjectCode);
    //    }
    //    if (orderProjectName)
    //    {
    //        ret = ret.ThenBy(p => p.ProjectName);
    //    }
    //    else
    //    {
    //        ret = ret.ThenByDescending(p => p.ProjectName);
    //    }
    //    projectList = PaginationService.GetProjectsPage(ret.ToList(), pagesize, pagenum);
    //    ProjectService.Projects = ret.ToList();
    //    StateHasChanged();
    //}
    
    private void OrderByProjectCode()
    {
        orderProjectCode = !orderProjectCode;
        var recordsToSort = ProjectService.Projects.AsQueryable();
        if (orderProjectCode)
        {
            recordsToSort = recordsToSort.OrderBy(p => p.ProjectCode);
        }
        else
        {
            recordsToSort = recordsToSort.OrderByDescending(p => p.ProjectCode);
        }        
        projectList = PaginationService.GetProjectsPage(recordsToSort.ToList(), pagesize, pagenum);
        ProjectService.Projects = recordsToSort.ToList();
        StateHasChanged();
    }

    private void OrderByProjectName()
    {
        orderProjectName = !orderProjectName;
        var recordsToSort = ProjectService.Projects.AsQueryable();
        if (orderProjectName)
        {
            recordsToSort = recordsToSort.OrderBy(p => p.ProjectName);
        }
        else
        {
            recordsToSort = recordsToSort.OrderByDescending(p => p.ProjectName);
        }
        projectList = PaginationService.GetProjectsPage(recordsToSort.ToList(), pagesize, pagenum);
        ProjectService.Projects = recordsToSort.ToList();
        StateHasChanged();
    }

    private void OrderByProjectManager()
    {
        orderProjectManagerUsername = !orderProjectManagerUsername;
        var recordsToSort = ProjectService.Projects.AsQueryable();
        if (orderProjectManagerUsername)
        {
            recordsToSort = recordsToSort.OrderBy(p => p.ProjectManagerUsername);
        }
        else
        {
            recordsToSort = recordsToSort.OrderByDescending(p => p.ProjectManagerUsername);
        }
        projectList = PaginationService.GetProjectsPage(recordsToSort.ToList(), pagesize, pagenum);
        ProjectService.Projects = recordsToSort.ToList();
        StateHasChanged();
    }

    private void OrderByProgress()
    {
        orderProjectProgress = !orderProjectProgress;
        var recordsToSort = ProjectService.Projects.AsQueryable();
        if (orderProjectProgress)
        {
            recordsToSort = recordsToSort.OrderBy(p => ProgressOfProject(p));
        }
        else
        {
            recordsToSort = recordsToSort.OrderByDescending(p => ProgressOfProject(p));
        }
        projectList = PaginationService.GetProjectsPage(recordsToSort.ToList(), pagesize, pagenum);
        ProjectService.Projects = recordsToSort.ToList();
        StateHasChanged();
    }

    private void OrderByProjectTasksTotal()
    {
        orderProjectTasksTotal = !orderProjectTasksTotal;
        var recordsToSort = ProjectService.Projects.AsQueryable();
        if (orderProjectTasksTotal)
        {
            recordsToSort = recordsToSort.OrderBy(p => NumOfTasksTotal(p));
        }
        else
        {
            recordsToSort = recordsToSort.OrderByDescending(p => NumOfTasksTotal(p));
        }
        projectList = PaginationService.GetProjectsPage(recordsToSort.ToList(), pagesize, pagenum);
        ProjectService.Projects = recordsToSort.ToList();
        StateHasChanged();
    }

    private void OrderByProjectTasksNew()
    {
        orderProjectTasksNew = !orderProjectTasksNew;
        var recordsToSort = ProjectService.Projects.AsQueryable();
        if (orderProjectTasksNew)
        {
            recordsToSort = recordsToSort.OrderBy(p => NumOfTasksNew(p));
        }
        else
        {
            recordsToSort = recordsToSort.OrderByDescending(p => NumOfTasksNew(p));
        }
        projectList = PaginationService.GetProjectsPage(recordsToSort.ToList(), pagesize, pagenum);
        ProjectService.Projects = recordsToSort.ToList();
        StateHasChanged();
    }

    private void OrderByProjectTasksInProgress()
    {
        orderProjectTasksInProgress = !orderProjectTasksInProgress;
        var recordsToSort = ProjectService.Projects.AsQueryable();
        if (orderProjectTasksInProgress)
        {
            recordsToSort = recordsToSort.OrderBy(p => NumOfTasksInProgress(p));
        }
        else
        {
            recordsToSort = recordsToSort.OrderByDescending(p => NumOfTasksInProgress(p));
        }
        projectList = PaginationService.GetProjectsPage(recordsToSort.ToList(), pagesize, pagenum);
        ProjectService.Projects = recordsToSort.ToList();
        StateHasChanged();
    }

    private void OrderByProjectTasksFinished()
    {
        orderProjectTasksFinished = !orderProjectTasksFinished;
        var recordsToSort = ProjectService.Projects.AsQueryable();
        if (orderProjectTasksFinished)
        {
            recordsToSort = recordsToSort.OrderBy(p => NumOfTasksFinished(p));
        }
        else
        {
            recordsToSort = recordsToSort.OrderByDescending(p => NumOfTasksFinished(p));
        }
        projectList = PaginationService.GetProjectsPage(recordsToSort.ToList(), pagesize, pagenum);
        ProjectService.Projects = recordsToSort.ToList();
        StateHasChanged();
    }
    

    private void OrderByProjectTasksOverdue()
    {
        orderProjectTasksOverdue = !orderProjectTasksOverdue;
        var recordsToSort = ProjectService.Projects.AsQueryable();
        if (orderProjectTasksOverdue)
        {
            recordsToSort = recordsToSort.OrderBy(p => NumOfTasksOverdue(p));
        }
        else
        {
            recordsToSort = recordsToSort.OrderByDescending(p => NumOfTasksOverdue(p));
        }
        projectList = PaginationService.GetProjectsPage(recordsToSort.ToList(), pagesize, pagenum);
        ProjectService.Projects = recordsToSort.ToList();
        StateHasChanged();
    }

    private void OrderProjectsByEverything()
    {
        
    }
}