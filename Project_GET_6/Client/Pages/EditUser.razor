@page "/edituser"
@page "/edituser/{username}"

@inject NavigationManager NavigationManager
@inject IRoleService RoleService
@inject IUserService UserService
@inject IProjectService ProjectService
@inject IProjectTaskService ProjectTaskService

@if(username == null)
{
    <h3>Username is null</h3>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th style="width: 6%" @onclick="(() => Cancel())"><h2>Users </h2></th>
                <th style="width: 33%"><h2>> Edit User</h2></th>
                
                <th>
                    <h3><button class="btn btn-danger" @onclick="(() => Delete())">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                                <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5Zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5Zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6Z" />
                                <path d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1ZM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118ZM2.5 3h11V2h-11v1Z" />
                            </svg>
                        Delete this User</button></h3>
                </th>
            </tr>
        </thead>
    </table>

    <EditForm Model="user" OnSubmit="HandleSubmit">
        <table class="table table-bordered table-hover" style="width:50%">
            <thead>
                <tr>
                    <td style="vertical-align: middle;">
                        <div>
                            <label for="name">Name</label>
                            <InputText id="name" @bind-Value="user.Name" class="form-control" placeholder="Name"></InputText>
                        </div>
                    </td>
                    <td style="vertical-align: middle;">
                        <div>
                            <label for="surname">Surname</label>
                            <InputText id="surname" @bind-Value="user.Surname" class="form-control" placeholder="Surname"></InputText>
                        </div>
                    </td>
                </tr>
                <tr>
                    <td style="vertical-align: middle;">
                        <div>
                            <label for="username">Username</label>
                            <InputText id="username" @bind-Value="user.Username" class="form-control" placeholder="Username" readonly></InputText>
                        </div>
                    </td>
                    <td style="vertical-align: middle;">
                        <div>
                            <label for="password">Password</label>
                            <InputText id="password" @bind-Value="user.Password" class="form-control" placeholder="Password"></InputText>
                        </div>
                    </td>
                </tr>
                <tr>
                    <td style="vertical-align: middle;">
                        <div>
                            <label for="email">E-mail</label>
                            <InputText id="email" @bind-Value="user.Email" class="form-control" placeholder="name@example.com"></InputText>
                        </div>
                    </td>
                    <td style="vertical-align: middle;">
                        <div>
                            <label for="role">Role</label>
                            <InputSelect id="role" @bind-Value="user.RoleId" class="form-control">
                                @foreach (var role in RoleService.Roles)
                                {
                                    <option value="@role.RoleId">@role.RoleName</option>
                                }
                            </InputSelect>
                        </div>
                    </td>
                </tr>
                <tr>
                    <th>

                    </th>
                    <th>
                        <div class="container-fluid">
                            <div class="row">
                                <div class="col-sm-6">
                                    <button style="width: 100%" class="btn btn-secondary" @onclick="(() => Cancel())">
                                        <span aria-hidden="true">&times;</span>
                                        Cancel</button>
                                </div>
                                <div class="col-sm-6" >
                                    <button style="width: 100%" class="btn btn-success" @onclick="(() => SaveEdits())">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-save" viewBox="0 0 16 16">
                                            <path d="M2 1a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H9.5a1 1 0 0 0-1 1v7.293l2.646-2.647a.5.5 0 0 1 .708.708l-3.5 3.5a.5.5 0 0 1-.708 0l-3.5-3.5a.5.5 0 1 1 .708-.708L7.5 9.293V2a2 2 0 0 1 2-2H14a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2h2.5a.5.5 0 0 1 0 1H2z" />
                                        </svg>
                                        Save</button>
                                </div>
                            </div>
                        </div>

                        
                        
                    </th>
                </tr>
            </thead>

        </table>



    </EditForm>
}

@code {
    [Parameter]
    public string? username { get; set; }

    public User user = new User();


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        //await UserService.GetUsers();
        user = UserService.Users.SingleOrDefault(u => u.Username == username, new User());

        //username = await LocalStorage.GetStringAsync("user");
        //username = null;
        //loggedInName = await LocalStorage.GetStringAsync("loggedInName");
        //loggedInSurname = await LocalStorage.GetStringAsync("loggedInSurname");
        //authService.SetCurrentRoleName("administrator");

        //await RoleService.GetRoles();
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("users");
    }

    private async void SaveEdits()
    {
        var result = await UserService.UpdateUser(user, user.Username);
        if (result.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("users");
        }
        else
        {
            NavigationManager.NavigateTo("error/edituser");
        }

    }
    private async void Delete()
    {
        if (ProjectTaskService.ProjectTasks.Where(t => t.AssigneeUsername == user.Username).ToList().Count > 0 || 
            ProjectService.Projects.Where(p => p.ProjectManagerUsername == user.Username).ToList().Count > 0)
        {
            NavigationManager.NavigateTo("error/deleteuser");
        }
        else
        {
            await UserService.DeleteUser(user.Username);
            NavigationManager.NavigateTo("users");
        }

    }


    private async void HandleSubmit()
    {
        //await UserService.UpdateUser(user, username);
        //NavigationManager.NavigateTo("administrator/users");
    }

    public async Task<bool> testEditUser(User u)
    {
        user = u;
        var result = await UserService.UpdateUser(user, user.Username);
        if (result.IsSuccessStatusCode)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    public async Task<bool> testDeleteUser(User u)
    {
        user = u;
        await ProjectTaskService.GetProjectTasks();
        await ProjectService.GetProjects();
        if (ProjectTaskService.ProjectTasks.Where(t => t.AssigneeUsername == user.Username).ToList().Count > 0 ||
            ProjectService.Projects.Where(p => p.ProjectManagerUsername == user.Username).ToList().Count > 0)
        {
            return false;
        }
        else
        {
            await UserService.DeleteUser(user.Username);
            return true;
        }
    }
}
