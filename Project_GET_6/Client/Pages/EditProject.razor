@page "/editproject"
@page "/editproject/{projcode}"

@inject NavigationManager NavigationManager
@inject IRoleService RoleService
@inject IUserService UserService
@inject IProjectService ProjectService
@inject IProjectTaskService ProjectTaskService

<table class="table">
    <thead>
        <tr>
            <th style="width: 8%" @onclick="(() => Cancel())"><h2>Projects</h2></th>
            <th style="width: 30%"><h2>> Edit Project</h2></th>
            <th>
                <h3><button class="btn btn-danger" @onclick="(() => Delete())">
                   
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                            <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5Zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5Zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6Z" />
                            <path d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1ZM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118ZM2.5 3h11V2h-11v1Z" />
                        </svg>
                        Delete this Project
                    </button>
                </h3>
            </th>
        </tr>
    </thead>
</table>

<EditForm Model="proj" OnSubmit="HandleSubmit">
    <table class="table table-bordered table-hover" style="width:50%">
        <thead>
            <tr>
                <td style="vertical-align: middle;">
                    <div>
                        <label for="code">Project Code</label>
                        <InputText id="code" @bind-Value="proj.ProjectCode" class="form-control" placeholder="Code" readonly></InputText>
                    </div>
                </td>
                <td style="vertical-align: middle;">
                    <div>
                        <label for="name">Project Name</label>
                        <InputText id="name" @bind-Value="proj.ProjectName" class="form-control" placeholder="Name" required></InputText>
                    </div>
                </td>
            </tr>
            <tr>
                <td style="vertical-align: middle;">
                    <div>
                        <label for="role">Project Manager</label>
                        <InputSelect id="role" @bind-Value="proj.ProjectManagerUsername" class="form-control" required>
                            @foreach (var user in UserService.Users)
                            {
                                if (CheckIfProjectManager(user))
                                {
                                    <option value="@user.Username">@NameOfUser(user)</option>
                                }
                            }
                        </InputSelect>
                    </div>
                </td>
                <td style="vertical-align: middle;">
                    <div class="container-fluid">
                        <div class="row">
                            <div class="col-sm-6">
                                <button style="width: 100%" class="btn btn-secondary" @onclick="(() => Cancel())">

                                    <span aria-hidden="true">&times;</span>
                                    Cancel
                                </button>
                            </div>
                            <div class="col-sm-6">
                                <button style="width: 100%" class="btn btn-success" @onclick="(() => SaveEdits())">

                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-save" viewBox="0 0 16 16">
                                        <path d="M2 1a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H9.5a1 1 0 0 0-1 1v7.293l2.646-2.647a.5.5 0 0 1 .708.708l-3.5 3.5a.5.5 0 0 1-.708 0l-3.5-3.5a.5.5 0 1 1 .708-.708L7.5 9.293V2a2 2 0 0 1 2-2H14a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2h2.5a.5.5 0 0 1 0 1H2z" />
                                    </svg>
                                    Save
                                </button>
                            </div>
                        </div>
                    </div>
                </td>
            </tr>
        </thead>

    </table>

    @if (messageShow)
    {
        <div class="mb-3">
            <label class="form-label" style="color: red">Invalid data. Try again.</label>
        </div>
    }



</EditForm>

@code {
    [Parameter]
    public string? projcode { get; set; }

    public Project proj = new Project();

    private bool messageShow = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        //await UserService.GetUsers();
        proj = ProjectService.Projects.SingleOrDefault(p => p.ProjectCode == projcode, new Project());

        //username = await LocalStorage.GetStringAsync("user");
        //username = null;
        //loggedInName = await LocalStorage.GetStringAsync("loggedInName");
        //loggedInSurname = await LocalStorage.GetStringAsync("loggedInSurname");
        //authService.SetCurrentRoleName("administrator");

        //await RoleService.GetRoles();
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("projects");
    }

    private async void SaveEdits()
    {
        if (proj.ProjectCode == null || proj.ProjectCode == "" ||
            proj.ProjectName == null || proj.ProjectName == "" ||
            proj.ProjectManagerUsername == null || proj.ProjectManagerUsername == ""

        )
        {
            messageShow = true;
        }
        else
        {
            var result = await ProjectService.UpdateProject(proj, proj.ProjectCode);
            if (result.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("projects");
            }
            else
            {
                NavigationManager.NavigateTo("error/editproject");
            }
        }

    }
    private async void Delete()
    {
        //if(ProjectTaskService.ProjectTasks.Where(t => t.ParentProjectProjectCode == proj.ProjectCode).ToList().Count > 0)
        //{
        //    NavigationManager.NavigateTo("error/deleteproject");
        //}
        //else
        //{
            await ProjectService.DeleteProject(proj.ProjectCode);
            NavigationManager.NavigateTo("projects");
        //}


    }




    private async void HandleSubmit()
    {
        //await UserService.UpdateUser(user, username);
        //NavigationManager.NavigateTo("administrator/users");
    }

    private string NameOfUser(User u)
    {
        return u.Name + " " + u.Surname + "  [" + u.Username + "]";
    }

    private bool CheckIfProjectManager(User u)
    {
        var r = RoleService.Roles.SingleOrDefault(r => r.RoleId == u.RoleId);
        if (r != null)
        {
            return r.RoleName == "Project Manager";
        }
        return false;
    }

    public async Task<bool> testDeleteProject(Project p)
    {
        proj = p;
        await ProjectTaskService.GetProjectTasks();
        if (ProjectTaskService.ProjectTasks.Where(t => t.ParentProjectProjectCode == proj.ProjectCode).ToList().Count > 0)
        {
            return false;
        }
        else
        {
            await ProjectService.DeleteProject(proj.ProjectCode);
            return true;
        }
    }

}
